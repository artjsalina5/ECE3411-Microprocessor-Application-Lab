
default.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn  Flags
  0 .data         00000198  00804000  000018fe  00001992  2**0  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000018fe  00000000  00000000  00000094  2**1  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000125  00804198  00804198  00001b2a  2**0  ALLOC
  3 .comment      0000005c  00000000  00000000  00001b2a  2**0  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001b88  2**2  CONTENTS, READONLY
  5 .debug_aranges 00000138  00000000  00000000  00001bc8  2**0  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000055c4  00000000  00000000  00001d00  2**0  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003bb4  00000000  00000000  000072c4  2**0  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001278  00000000  00000000  0000ae78  2**0  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000440  00000000  00000000  0000c0f0  2**2  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00002270  00000000  00000000  0000c530  2**0  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001bd6  00000000  00000000  0000e7a0  2**0  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000278  00000000  00000000  00010376  2**0  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
__vectors():
../../../../crt1/gcrt1.S:61
       0:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__ctors_end>
../../../../crt1/gcrt1.S:67
       4:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
../../../../crt1/gcrt1.S:68
       8:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
../../../../crt1/gcrt1.S:69
       c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
../../../../crt1/gcrt1.S:70
      10:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
../../../../crt1/gcrt1.S:71
      14:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
../../../../crt1/gcrt1.S:72
      18:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
../../../../crt1/gcrt1.S:73
      1c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
../../../../crt1/gcrt1.S:74
      20:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
../../../../crt1/gcrt1.S:75
      24:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
../../../../crt1/gcrt1.S:76
      28:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
../../../../crt1/gcrt1.S:77
      2c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
../../../../crt1/gcrt1.S:78
      30:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
../../../../crt1/gcrt1.S:79
      34:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
../../../../crt1/gcrt1.S:80
      38:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
../../../../crt1/gcrt1.S:81
      3c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
../../../../crt1/gcrt1.S:82
      40:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
../../../../crt1/gcrt1.S:83
      44:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
../../../../crt1/gcrt1.S:84
      48:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
../../../../crt1/gcrt1.S:85
      4c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
../../../../crt1/gcrt1.S:86
      50:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
../../../../crt1/gcrt1.S:87
      54:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
../../../../crt1/gcrt1.S:88
      58:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
../../../../crt1/gcrt1.S:89
      5c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
../../../../crt1/gcrt1.S:90
      60:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
../../../../crt1/gcrt1.S:91
      64:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
../../../../crt1/gcrt1.S:92
      68:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
../../../../crt1/gcrt1.S:93
      6c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
../../../../crt1/gcrt1.S:94
      70:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
../../../../crt1/gcrt1.S:95
      74:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
../../../../crt1/gcrt1.S:96
      78:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
../../../../crt1/gcrt1.S:97
      7c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
../../../../crt1/gcrt1.S:98
      80:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
../../../../crt1/gcrt1.S:99
      84:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
../../../../crt1/gcrt1.S:100
      88:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
../../../../crt1/gcrt1.S:101
      8c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
../../../../crt1/gcrt1.S:102
      90:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
../../../../crt1/gcrt1.S:103
      94:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
../../../../crt1/gcrt1.S:104
      98:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
../../../../crt1/gcrt1.S:105
      9c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
../../../../crt1/gcrt1.S:106
      a0:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
../../../../crt1/gcrt1.S:107
      a4:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
../../../../crt1/gcrt1.S:108
      a8:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
../../../../crt1/gcrt1.S:109
      ac:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
../../../../crt1/gcrt1.S:110
      b0:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
../../../../crt1/gcrt1.S:111
      b4:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
../../../../crt1/gcrt1.S:112
      b8:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
../../../../crt1/gcrt1.S:113
      bc:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
../../../../crt1/gcrt1.S:114
      c0:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
../../../../crt1/gcrt1.S:115
      c4:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
../../../../crt1/gcrt1.S:116
      c8:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
../../../../crt1/gcrt1.S:117
      cc:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
../../../../crt1/gcrt1.S:118
      d0:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
../../../../crt1/gcrt1.S:119
      d4:	0c 94 a3 03 	jmp	0x746	; 0x746 <__vector_53>
../../../../crt1/gcrt1.S:120
      d8:	0c 94 cd 03 	jmp	0x79a	; 0x79a <__vector_54>
../../../../crt1/gcrt1.S:121
      dc:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
../../../../crt1/gcrt1.S:122
      e0:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
../../../../crt1/gcrt1.S:123
      e4:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
../../../../crt1/gcrt1.S:124
      e8:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
../../../../crt1/gcrt1.S:125
      ec:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
../../../../crt1/gcrt1.S:126
      f0:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>

000000f4 <__ctors_end>:
__trampolines_start():
../../../../crt1/gcrt1.S:230
      f4:	11 24       	eor	r1, r1
../../../../crt1/gcrt1.S:231
      f6:	1f be       	out	0x3f, r1	; 63
../../../../crt1/gcrt1.S:232
      f8:	cf ef       	ldi	r28, 0xFF	; 255
../../../../crt1/gcrt1.S:234
      fa:	cd bf       	out	0x3d, r28	; 61
../../../../crt1/gcrt1.S:236
      fc:	df e7       	ldi	r29, 0x7F	; 127
../../../../crt1/gcrt1.S:237
      fe:	de bf       	out	0x3e, r29	; 62

00000100 <__do_copy_data>:
__do_copy_data():
     100:	11 e4       	ldi	r17, 0x41	; 65
     102:	a0 e0       	ldi	r26, 0x00	; 0
     104:	b0 e4       	ldi	r27, 0x40	; 64
     106:	ee ef       	ldi	r30, 0xFE	; 254
     108:	f8 e1       	ldi	r31, 0x18	; 24
     10a:	00 e0       	ldi	r16, 0x00	; 0
     10c:	0b bf       	out	0x3b, r16	; 59
     10e:	02 c0       	rjmp	.+4      	; 0x114 <__do_copy_data+0x14>
     110:	07 90       	elpm	r0, Z+
     112:	0d 92       	st	X+, r0
     114:	a8 39       	cpi	r26, 0x98	; 152
     116:	b1 07       	cpc	r27, r17
     118:	d9 f7       	brne	.-10     	; 0x110 <__do_copy_data+0x10>

0000011a <__do_clear_bss>:
__do_clear_bss():
     11a:	22 e4       	ldi	r18, 0x42	; 66
     11c:	a8 e9       	ldi	r26, 0x98	; 152
     11e:	b1 e4       	ldi	r27, 0x41	; 65
     120:	01 c0       	rjmp	.+2      	; 0x124 <.do_clear_bss_start>

00000122 <.do_clear_bss_loop>:
     122:	1d 92       	st	X+, r1

00000124 <.do_clear_bss_start>:
     124:	ad 3b       	cpi	r26, 0xBD	; 189
     126:	b2 07       	cpc	r27, r18
     128:	e1 f7       	brne	.-8      	; 0x122 <.do_clear_bss_loop>
.do_clear_bss_start():
../../../../crt1/gcrt1.S:314
     12a:	0e 94 0a 04 	call	0x814	; 0x814 <main>
../../../../crt1/gcrt1.S:315
     12e:	0c 94 7d 0c 	jmp	0x18fa	; 0x18fa <_exit>

00000132 <__bad_interrupt>:
__vector_38():
../../../../crt1/gcrt1.S:209
     132:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000136 <circular_buf_reset>:
circular_buf_reset():
/home/artj/Documents/ECE3411uCLab/labs/circular_buffer_uart/circular_buffers_uart/include/circularbuff.c:22

#pragma mark - Private Functions -

static inline size_t advance_headtail_value(size_t value, size_t max) {
  if (++value == max) {
    value = 0;
     136:	00 97       	sbiw	r24, 0x00	; 0
     138:	31 f0       	breq	.+12     	; 0x146 <circular_buf_reset+0x10>
     13a:	fc 01       	movw	r30, r24
     13c:	12 82       	std	Z+2, r1	; 0x02
     13e:	13 82       	std	Z+3, r1	; 0x03
     140:	14 82       	std	Z+4, r1	; 0x04
     142:	15 82       	std	Z+5, r1	; 0x05
     144:	08 95       	ret
     146:	0e 94 2e 09 	call	0x125c	; 0x125c <abort>

0000014a <circular_buf_empty>:
circular_buf_empty():
     14a:	fc 01       	movw	r30, r24
     14c:	89 2b       	or	r24, r25
     14e:	51 f0       	breq	.+20     	; 0x164 <circular_buf_empty+0x1a>
     150:	81 e0       	ldi	r24, 0x01	; 1
     152:	42 81       	ldd	r20, Z+2	; 0x02
     154:	53 81       	ldd	r21, Z+3	; 0x03
     156:	24 81       	ldd	r18, Z+4	; 0x04
     158:	35 81       	ldd	r19, Z+5	; 0x05
     15a:	42 17       	cp	r20, r18
     15c:	53 07       	cpc	r21, r19
     15e:	09 f0       	breq	.+2      	; 0x162 <circular_buf_empty+0x18>
     160:	80 e0       	ldi	r24, 0x00	; 0
     162:	08 95       	ret
     164:	0e 94 2e 09 	call	0x125c	; 0x125c <abort>

00000168 <circular_buf_init>:
circular_buf_init():
     168:	ef 92       	push	r14
     16a:	ff 92       	push	r15
     16c:	0f 93       	push	r16
     16e:	1f 93       	push	r17
     170:	cf 93       	push	r28
     172:	df 93       	push	r29
     174:	8c 01       	movw	r16, r24
     176:	7b 01       	movw	r14, r22
     178:	89 2b       	or	r24, r25
     17a:	e9 f0       	breq	.+58     	; 0x1b6 <circular_buf_init+0x4e>
     17c:	62 30       	cpi	r22, 0x02	; 2
     17e:	71 05       	cpc	r23, r1
     180:	d0 f0       	brcs	.+52     	; 0x1b6 <circular_buf_init+0x4e>
     182:	88 e0       	ldi	r24, 0x08	; 8
     184:	90 e0       	ldi	r25, 0x00	; 0
     186:	0e 94 09 08 	call	0x1012	; 0x1012 <malloc>
     18a:	ec 01       	movw	r28, r24
     18c:	00 97       	sbiw	r24, 0x00	; 0
     18e:	a9 f0       	breq	.+42     	; 0x1ba <circular_buf_init+0x52>
     190:	08 83       	st	Y, r16
     192:	19 83       	std	Y+1, r17	; 0x01
     194:	ee 82       	std	Y+6, r14	; 0x06
     196:	ff 82       	std	Y+7, r15	; 0x07
     198:	0e 94 9b 00 	call	0x136	; 0x136 <circular_buf_reset>
     19c:	ce 01       	movw	r24, r28
     19e:	0e 94 a5 00 	call	0x14a	; 0x14a <circular_buf_empty>
     1a2:	88 23       	and	r24, r24
     1a4:	61 f0       	breq	.+24     	; 0x1be <circular_buf_init+0x56>
     1a6:	ce 01       	movw	r24, r28
     1a8:	df 91       	pop	r29
     1aa:	cf 91       	pop	r28
     1ac:	1f 91       	pop	r17
     1ae:	0f 91       	pop	r16
     1b0:	ff 90       	pop	r15
     1b2:	ef 90       	pop	r14
     1b4:	08 95       	ret
     1b6:	0e 94 2e 09 	call	0x125c	; 0x125c <abort>
     1ba:	0e 94 2e 09 	call	0x125c	; 0x125c <abort>
     1be:	0e 94 2e 09 	call	0x125c	; 0x125c <abort>

000001c2 <circular_buf_get>:
circular_buf_get():
     1c2:	ef 92       	push	r14
     1c4:	ff 92       	push	r15
     1c6:	0f 93       	push	r16
     1c8:	1f 93       	push	r17
     1ca:	cf 93       	push	r28
     1cc:	df 93       	push	r29
     1ce:	ec 01       	movw	r28, r24
     1d0:	7b 01       	movw	r14, r22
     1d2:	00 97       	sbiw	r24, 0x00	; 0
     1d4:	31 f1       	breq	.+76     	; 0x222 <__EEPROM_REGION_LENGTH__+0x22>
     1d6:	67 2b       	or	r22, r23
     1d8:	21 f1       	breq	.+72     	; 0x222 <__EEPROM_REGION_LENGTH__+0x22>
     1da:	08 81       	ld	r16, Y
     1dc:	19 81       	ldd	r17, Y+1	; 0x01
     1de:	01 15       	cp	r16, r1
     1e0:	11 05       	cpc	r17, r1
     1e2:	f9 f0       	breq	.+62     	; 0x222 <__EEPROM_REGION_LENGTH__+0x22>
     1e4:	0e 94 a5 00 	call	0x14a	; 0x14a <circular_buf_empty>
     1e8:	81 11       	cpse	r24, r1
     1ea:	20 c0       	rjmp	.+64     	; 0x22c <__EEPROM_REGION_LENGTH__+0x2c>
     1ec:	8c 81       	ldd	r24, Y+4	; 0x04
     1ee:	9d 81       	ldd	r25, Y+5	; 0x05
     1f0:	08 0f       	add	r16, r24
     1f2:	19 1f       	adc	r17, r25
     1f4:	f8 01       	movw	r30, r16
     1f6:	80 81       	ld	r24, Z
     1f8:	f7 01       	movw	r30, r14
     1fa:	80 83       	st	Z, r24
advance_headtail_value():
     1fc:	8c 81       	ldd	r24, Y+4	; 0x04
     1fe:	9d 81       	ldd	r25, Y+5	; 0x05
     200:	01 96       	adiw	r24, 0x01	; 1
     202:	2e 81       	ldd	r18, Y+6	; 0x06
     204:	3f 81       	ldd	r19, Y+7	; 0x07
     206:	28 17       	cp	r18, r24
     208:	39 07       	cpc	r19, r25
     20a:	69 f0       	breq	.+26     	; 0x226 <__EEPROM_REGION_LENGTH__+0x26>
circular_buf_get():
     20c:	8c 83       	std	Y+4, r24	; 0x04
     20e:	9d 83       	std	Y+5, r25	; 0x05
     210:	90 e0       	ldi	r25, 0x00	; 0
     212:	80 e0       	ldi	r24, 0x00	; 0
     214:	df 91       	pop	r29
     216:	cf 91       	pop	r28
     218:	1f 91       	pop	r17
     21a:	0f 91       	pop	r16
     21c:	ff 90       	pop	r15
     21e:	ef 90       	pop	r14
     220:	08 95       	ret
     222:	0e 94 2e 09 	call	0x125c	; 0x125c <abort>
advance_headtail_value():
     226:	90 e0       	ldi	r25, 0x00	; 0
     228:	80 e0       	ldi	r24, 0x00	; 0
     22a:	f0 cf       	rjmp	.-32     	; 0x20c <__EEPROM_REGION_LENGTH__+0xc>
circular_buf_get():
     22c:	8f ef       	ldi	r24, 0xFF	; 255
     22e:	9f ef       	ldi	r25, 0xFF	; 255
     230:	f1 cf       	rjmp	.-30     	; 0x214 <__EEPROM_REGION_LENGTH__+0x14>

00000232 <circular_buf_full>:
circular_buf_full():
     232:	fc 01       	movw	r30, r24
advance_headtail_value():
     234:	22 81       	ldd	r18, Z+2	; 0x02
     236:	33 81       	ldd	r19, Z+3	; 0x03
     238:	2f 5f       	subi	r18, 0xFF	; 255
     23a:	3f 4f       	sbci	r19, 0xFF	; 255
     23c:	86 81       	ldd	r24, Z+6	; 0x06
     23e:	97 81       	ldd	r25, Z+7	; 0x07
     240:	82 17       	cp	r24, r18
     242:	93 07       	cpc	r25, r19
     244:	41 f0       	breq	.+16     	; 0x256 <circular_buf_full+0x24>
circular_buf_full():
     246:	81 e0       	ldi	r24, 0x01	; 1
     248:	44 81       	ldd	r20, Z+4	; 0x04
     24a:	55 81       	ldd	r21, Z+5	; 0x05
     24c:	42 17       	cp	r20, r18
     24e:	53 07       	cpc	r21, r19
     250:	09 f0       	breq	.+2      	; 0x254 <circular_buf_full+0x22>
     252:	80 e0       	ldi	r24, 0x00	; 0
     254:	08 95       	ret
advance_headtail_value():
     256:	30 e0       	ldi	r19, 0x00	; 0
     258:	20 e0       	ldi	r18, 0x00	; 0
     25a:	f5 cf       	rjmp	.-22     	; 0x246 <circular_buf_full+0x14>

0000025c <circular_buf_try_put>:
circular_buf_try_put():
/home/artj/Documents/ECE3411uCLab/labs/circular_buffer_uart/circular_buffers_uart/include/circularbuff.c:97
  }

  me->head = advance_headtail_value(me->head, me->max);
}

int circular_buf_try_put(cbuf_handle_t me, uint8_t data) {
     25c:	ff 92       	push	r15
     25e:	0f 93       	push	r16
     260:	1f 93       	push	r17
     262:	cf 93       	push	r28
     264:	df 93       	push	r29
     266:	ec 01       	movw	r28, r24
     268:	f6 2e       	mov	r15, r22
/home/artj/Documents/ECE3411uCLab/labs/circular_buffer_uart/circular_buffers_uart/include/circularbuff.c:98
  assert(me && me->buffer);
     26a:	00 97       	sbiw	r24, 0x00	; 0
     26c:	09 f1       	breq	.+66     	; 0x2b0 <circular_buf_try_put+0x54>
/home/artj/Documents/ECE3411uCLab/labs/circular_buffer_uart/circular_buffers_uart/include/circularbuff.c:98 (discriminator 2)
     26e:	08 81       	ld	r16, Y
     270:	19 81       	ldd	r17, Y+1	; 0x01
     272:	01 15       	cp	r16, r1
     274:	11 05       	cpc	r17, r1
     276:	e1 f0       	breq	.+56     	; 0x2b0 <circular_buf_try_put+0x54>
/home/artj/Documents/ECE3411uCLab/labs/circular_buffer_uart/circular_buffers_uart/include/circularbuff.c:102

  int r = -1;

  if (!circular_buf_full(me)) {
     278:	0e 94 19 01 	call	0x232	; 0x232 <circular_buf_full>
     27c:	81 11       	cpse	r24, r1
     27e:	1d c0       	rjmp	.+58     	; 0x2ba <circular_buf_try_put+0x5e>
/home/artj/Documents/ECE3411uCLab/labs/circular_buffer_uart/circular_buffers_uart/include/circularbuff.c:103
    me->buffer[me->head] = data;
     280:	8a 81       	ldd	r24, Y+2	; 0x02
     282:	9b 81       	ldd	r25, Y+3	; 0x03
     284:	08 0f       	add	r16, r24
     286:	19 1f       	adc	r17, r25
     288:	f8 01       	movw	r30, r16
     28a:	f0 82       	st	Z, r15
advance_headtail_value():
/home/artj/Documents/ECE3411uCLab/labs/circular_buffer_uart/circular_buffers_uart/include/circularbuff.c:21
};

#pragma mark - Private Functions -

static inline size_t advance_headtail_value(size_t value, size_t max) {
  if (++value == max) {
     28c:	8a 81       	ldd	r24, Y+2	; 0x02
     28e:	9b 81       	ldd	r25, Y+3	; 0x03
     290:	01 96       	adiw	r24, 0x01	; 1
     292:	2e 81       	ldd	r18, Y+6	; 0x06
     294:	3f 81       	ldd	r19, Y+7	; 0x07
     296:	28 17       	cp	r18, r24
     298:	39 07       	cpc	r19, r25
     29a:	61 f0       	breq	.+24     	; 0x2b4 <circular_buf_try_put+0x58>
circular_buf_try_put():
/home/artj/Documents/ECE3411uCLab/labs/circular_buffer_uart/circular_buffers_uart/include/circularbuff.c:104

  int r = -1;

  if (!circular_buf_full(me)) {
    me->buffer[me->head] = data;
    me->head = advance_headtail_value(me->head, me->max);
     29c:	8a 83       	std	Y+2, r24	; 0x02
     29e:	9b 83       	std	Y+3, r25	; 0x03
/home/artj/Documents/ECE3411uCLab/labs/circular_buffer_uart/circular_buffers_uart/include/circularbuff.c:105
    r = 0;
     2a0:	90 e0       	ldi	r25, 0x00	; 0
     2a2:	80 e0       	ldi	r24, 0x00	; 0
/home/artj/Documents/ECE3411uCLab/labs/circular_buffer_uart/circular_buffers_uart/include/circularbuff.c:109
  }

  return r;
}
     2a4:	df 91       	pop	r29
     2a6:	cf 91       	pop	r28
     2a8:	1f 91       	pop	r17
     2aa:	0f 91       	pop	r16
     2ac:	ff 90       	pop	r15
     2ae:	08 95       	ret
/home/artj/Documents/ECE3411uCLab/labs/circular_buffer_uart/circular_buffers_uart/include/circularbuff.c:98 (discriminator 3)

  me->head = advance_headtail_value(me->head, me->max);
}

int circular_buf_try_put(cbuf_handle_t me, uint8_t data) {
  assert(me && me->buffer);
     2b0:	0e 94 2e 09 	call	0x125c	; 0x125c <abort>
advance_headtail_value():
/home/artj/Documents/ECE3411uCLab/labs/circular_buffer_uart/circular_buffers_uart/include/circularbuff.c:22

#pragma mark - Private Functions -

static inline size_t advance_headtail_value(size_t value, size_t max) {
  if (++value == max) {
    value = 0;
     2b4:	90 e0       	ldi	r25, 0x00	; 0
     2b6:	80 e0       	ldi	r24, 0x00	; 0
     2b8:	f1 cf       	rjmp	.-30     	; 0x29c <circular_buf_try_put+0x40>
circular_buf_try_put():
/home/artj/Documents/ECE3411uCLab/labs/circular_buffer_uart/circular_buffers_uart/include/circularbuff.c:100
}

int circular_buf_try_put(cbuf_handle_t me, uint8_t data) {
  assert(me && me->buffer);

  int r = -1;
     2ba:	8f ef       	ldi	r24, 0xFF	; 255
     2bc:	9f ef       	ldi	r25, 0xFF	; 255
/home/artj/Documents/ECE3411uCLab/labs/circular_buffer_uart/circular_buffers_uart/include/circularbuff.c:108
    me->buffer[me->head] = data;
    me->head = advance_headtail_value(me->head, me->max);
    r = 0;
  }

  return r;
     2be:	f2 cf       	rjmp	.-28     	; 0x2a4 <circular_buf_try_put+0x48>

000002c0 <buffer_get>:
buffer_get():
/home/artj/Documents/ECE3411uCLab/labs/circular_buffer_uart/circular_buffers_uart/include/uart.c:335
}

void usart_transmit_data(void *ptr, char c) {
  USART_t *usart = (USART_t *)ptr;
  usart->TXDATAL = c;
}
     2c0:	0f 93       	push	r16
     2c2:	1f 93       	push	r17
     2c4:	cf 93       	push	r28
     2c6:	df 93       	push	r29
     2c8:	1f 92       	push	r1
     2ca:	cd b7       	in	r28, 0x3d	; 61
     2cc:	de b7       	in	r29, 0x3e	; 62
     2ce:	00 97       	sbiw	r24, 0x00	; 0
     2d0:	81 f0       	breq	.+32     	; 0x2f2 <buffer_get+0x32>
     2d2:	61 15       	cp	r22, r1
     2d4:	71 05       	cpc	r23, r1
     2d6:	79 f0       	breq	.+30     	; 0x2f6 <buffer_get+0x36>
     2d8:	8b 01       	movw	r16, r22
     2da:	be 01       	movw	r22, r28
     2dc:	6f 5f       	subi	r22, 0xFF	; 255
     2de:	7f 4f       	sbci	r23, 0xFF	; 255
     2e0:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <circular_buf_get>
     2e4:	89 2b       	or	r24, r25
     2e6:	71 f4       	brne	.+28     	; 0x304 <buffer_get+0x44>
     2e8:	89 81       	ldd	r24, Y+1	; 0x01
     2ea:	f8 01       	movw	r30, r16
     2ec:	80 83       	st	Z, r24
     2ee:	81 e0       	ldi	r24, 0x01	; 1
     2f0:	03 c0       	rjmp	.+6      	; 0x2f8 <buffer_get+0x38>
     2f2:	80 e0       	ldi	r24, 0x00	; 0
     2f4:	01 c0       	rjmp	.+2      	; 0x2f8 <buffer_get+0x38>
     2f6:	80 e0       	ldi	r24, 0x00	; 0
     2f8:	0f 90       	pop	r0
     2fa:	df 91       	pop	r29
     2fc:	cf 91       	pop	r28
     2fe:	1f 91       	pop	r17
     300:	0f 91       	pop	r16
     302:	08 95       	ret
     304:	80 e0       	ldi	r24, 0x00	; 0
     306:	f8 cf       	rjmp	.-16     	; 0x2f8 <buffer_get+0x38>

00000308 <uart_receive_char>:
uart_receive_char():
     308:	bc 01       	movw	r22, r24
     30a:	80 91 ec 41 	lds	r24, 0x41EC	; 0x8041ec <uart_rx_buffer>
     30e:	90 91 ed 41 	lds	r25, 0x41ED	; 0x8041ed <uart_rx_buffer+0x1>
     312:	0e 94 60 01 	call	0x2c0	; 0x2c0 <buffer_get>
     316:	08 95       	ret

00000318 <uart_rx_isr_handler>:
uart_rx_isr_handler():
     318:	20 91 ec 41 	lds	r18, 0x41EC	; 0x8041ec <uart_rx_buffer>
     31c:	30 91 ed 41 	lds	r19, 0x41ED	; 0x8041ed <uart_rx_buffer+0x1>
buffer_put():
     320:	21 15       	cp	r18, r1
     322:	31 05       	cpc	r19, r1
     324:	21 f0       	breq	.+8      	; 0x32e <uart_rx_isr_handler+0x16>
     326:	68 2f       	mov	r22, r24
     328:	c9 01       	movw	r24, r18
     32a:	0e 94 2e 01 	call	0x25c	; 0x25c <circular_buf_try_put>
uart_rx_isr_handler():
     32e:	08 95       	ret

00000330 <uart_tx_isr_handler>:
uart_tx_isr_handler():
     330:	bc 01       	movw	r22, r24
     332:	80 91 ee 41 	lds	r24, 0x41EE	; 0x8041ee <uart_tx_buffer>
     336:	90 91 ef 41 	lds	r25, 0x41EF	; 0x8041ef <uart_tx_buffer+0x1>
     33a:	0e 94 60 01 	call	0x2c0	; 0x2c0 <buffer_get>
     33e:	08 95       	ret

00000340 <usart_init>:
usart_init():
     340:	8f 92       	push	r8
     342:	9f 92       	push	r9
     344:	af 92       	push	r10
     346:	bf 92       	push	r11
     348:	cf 92       	push	r12
     34a:	df 92       	push	r13
     34c:	ef 92       	push	r14
     34e:	ff 92       	push	r15
     350:	0f 93       	push	r16
     352:	1f 93       	push	r17
     354:	cf 93       	push	r28
     356:	df 93       	push	r29
     358:	4a 01       	movw	r8, r20
     35a:	5b 01       	movw	r10, r22
     35c:	88 23       	and	r24, r24
     35e:	91 f0       	breq	.+36     	; 0x384 <usart_init+0x44>
     360:	81 30       	cpi	r24, 0x01	; 1
     362:	09 f4       	brne	.+2      	; 0x366 <usart_init+0x26>
     364:	4d c0       	rjmp	.+154    	; 0x400 <__LOCK_REGION_LENGTH__>
     366:	82 30       	cpi	r24, 0x02	; 2
     368:	09 f4       	brne	.+2      	; 0x36c <usart_init+0x2c>
     36a:	4f c0       	rjmp	.+158    	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
     36c:	83 30       	cpi	r24, 0x03	; 3
     36e:	09 f4       	brne	.+2      	; 0x372 <usart_init+0x32>
     370:	52 c0       	rjmp	.+164    	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
     372:	84 30       	cpi	r24, 0x04	; 4
     374:	09 f0       	breq	.+2      	; 0x378 <usart_init+0x38>
     376:	55 c0       	rjmp	.+170    	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
     378:	81 e0       	ldi	r24, 0x01	; 1
     37a:	80 93 81 04 	sts	0x0481, r24	; 0x800481 <__TEXT_REGION_LENGTH__+0x7e0481>
     37e:	c0 e8       	ldi	r28, 0x80	; 128
     380:	d8 e0       	ldi	r29, 0x08	; 8
     382:	05 c0       	rjmp	.+10     	; 0x38e <usart_init+0x4e>
     384:	81 e0       	ldi	r24, 0x01	; 1
     386:	80 93 01 04 	sts	0x0401, r24	; 0x800401 <__TEXT_REGION_LENGTH__+0x7e0401>
     38a:	c0 e0       	ldi	r28, 0x00	; 0
     38c:	d8 e0       	ldi	r29, 0x08	; 8
     38e:	c9 01       	movw	r24, r18
     390:	b8 01       	movw	r22, r16
     392:	0e 94 0e 07 	call	0xe1c	; 0xe1c <__floatunsisf>
     396:	20 e0       	ldi	r18, 0x00	; 0
     398:	30 e0       	ldi	r19, 0x00	; 0
     39a:	40 e8       	ldi	r20, 0x80	; 128
     39c:	52 e4       	ldi	r21, 0x42	; 66
     39e:	0e 94 9c 07 	call	0xf38	; 0xf38 <__mulsf3>
     3a2:	6b 01       	movw	r12, r22
     3a4:	7c 01       	movw	r14, r24
     3a6:	c5 01       	movw	r24, r10
     3a8:	b4 01       	movw	r22, r8
     3aa:	0e 94 0e 07 	call	0xe1c	; 0xe1c <__floatunsisf>
     3ae:	20 e0       	ldi	r18, 0x00	; 0
     3b0:	30 e0       	ldi	r19, 0x00	; 0
     3b2:	40 e8       	ldi	r20, 0x80	; 128
     3b4:	51 e4       	ldi	r21, 0x41	; 65
     3b6:	0e 94 9c 07 	call	0xf38	; 0xf38 <__mulsf3>
     3ba:	9b 01       	movw	r18, r22
     3bc:	ac 01       	movw	r20, r24
     3be:	c7 01       	movw	r24, r14
     3c0:	b6 01       	movw	r22, r12
     3c2:	0e 94 6d 06 	call	0xcda	; 0xcda <__divsf3>
     3c6:	20 e0       	ldi	r18, 0x00	; 0
     3c8:	30 e0       	ldi	r19, 0x00	; 0
     3ca:	40 e0       	ldi	r20, 0x00	; 0
     3cc:	5f e3       	ldi	r21, 0x3F	; 63
     3ce:	0e 94 01 06 	call	0xc02	; 0xc02 <__addsf3>
     3d2:	0e 94 df 06 	call	0xdbe	; 0xdbe <__fixunssfsi>
     3d6:	68 87       	std	Y+8, r22	; 0x08
     3d8:	79 87       	std	Y+9, r23	; 0x09
     3da:	83 e0       	ldi	r24, 0x03	; 3
     3dc:	8f 83       	std	Y+7, r24	; 0x07
     3de:	8e 81       	ldd	r24, Y+6	; 0x06
     3e0:	80 6c       	ori	r24, 0xC0	; 192
     3e2:	8e 83       	std	Y+6, r24	; 0x06
     3e4:	ce 01       	movw	r24, r28
     3e6:	df 91       	pop	r29
     3e8:	cf 91       	pop	r28
     3ea:	1f 91       	pop	r17
     3ec:	0f 91       	pop	r16
     3ee:	ff 90       	pop	r15
     3f0:	ef 90       	pop	r14
     3f2:	df 90       	pop	r13
     3f4:	cf 90       	pop	r12
     3f6:	bf 90       	pop	r11
     3f8:	af 90       	pop	r10
     3fa:	9f 90       	pop	r9
     3fc:	8f 90       	pop	r8
     3fe:	08 95       	ret
     400:	80 93 41 04 	sts	0x0441, r24	; 0x800441 <__TEXT_REGION_LENGTH__+0x7e0441>
     404:	c0 e2       	ldi	r28, 0x20	; 32
     406:	d8 e0       	ldi	r29, 0x08	; 8
     408:	c2 cf       	rjmp	.-124    	; 0x38e <usart_init+0x4e>
     40a:	81 e0       	ldi	r24, 0x01	; 1
     40c:	80 93 a1 04 	sts	0x04A1, r24	; 0x8004a1 <__TEXT_REGION_LENGTH__+0x7e04a1>
     410:	c0 e4       	ldi	r28, 0x40	; 64
     412:	d8 e0       	ldi	r29, 0x08	; 8
     414:	bc cf       	rjmp	.-136    	; 0x38e <usart_init+0x4e>
     416:	81 e0       	ldi	r24, 0x01	; 1
     418:	80 93 21 04 	sts	0x0421, r24	; 0x800421 <__TEXT_REGION_LENGTH__+0x7e0421>
     41c:	c0 e6       	ldi	r28, 0x60	; 96
     41e:	d8 e0       	ldi	r29, 0x08	; 8
     420:	b6 cf       	rjmp	.-148    	; 0x38e <usart_init+0x4e>
     422:	d0 e0       	ldi	r29, 0x00	; 0
     424:	c0 e0       	ldi	r28, 0x00	; 0
     426:	b3 cf       	rjmp	.-154    	; 0x38e <usart_init+0x4e>

00000428 <uart_init>:
uart_init():
     428:	ef 92       	push	r14
     42a:	ff 92       	push	r15
     42c:	0f 93       	push	r16
     42e:	1f 93       	push	r17
     430:	cf 93       	push	r28
     432:	df 93       	push	r29
     434:	e1 14       	cp	r14, r1
     436:	f1 04       	cpc	r15, r1
     438:	b1 f1       	breq	.+108    	; 0x4a6 <uart_init+0x7e>
     43a:	9e e0       	ldi	r25, 0x0E	; 14
     43c:	e6 e0       	ldi	r30, 0x06	; 6
     43e:	f0 e4       	ldi	r31, 0x40	; 64
     440:	d7 01       	movw	r26, r14
     442:	01 90       	ld	r0, Z+
     444:	0d 92       	st	X+, r0
     446:	9a 95       	dec	r25
     448:	e1 f7       	brne	.-8      	; 0x442 <uart_init+0x1a>
     44a:	e7 01       	movw	r28, r14
     44c:	0e 94 a0 01 	call	0x340	; 0x340 <usart_init>
     450:	8c 87       	std	Y+12, r24	; 0x0c
     452:	9d 87       	std	Y+13, r25	; 0x0d
     454:	80 93 ea 41 	sts	0x41EA, r24	; 0x8041ea <active_usart>
     458:	90 93 eb 41 	sts	0x41EB, r25	; 0x8041eb <active_usart+0x1>
     45c:	60 e4       	ldi	r22, 0x40	; 64
     45e:	70 e0       	ldi	r23, 0x00	; 0
     460:	80 e3       	ldi	r24, 0x30	; 48
     462:	92 e4       	ldi	r25, 0x42	; 66
     464:	0e 94 b4 00 	call	0x168	; 0x168 <circular_buf_init>
     468:	80 93 ee 41 	sts	0x41EE, r24	; 0x8041ee <uart_tx_buffer>
     46c:	90 93 ef 41 	sts	0x41EF, r25	; 0x8041ef <uart_tx_buffer+0x1>
     470:	60 e4       	ldi	r22, 0x40	; 64
     472:	70 e0       	ldi	r23, 0x00	; 0
     474:	80 ef       	ldi	r24, 0xF0	; 240
     476:	91 e4       	ldi	r25, 0x41	; 65
     478:	0e 94 b4 00 	call	0x168	; 0x168 <circular_buf_init>
     47c:	80 93 ec 41 	sts	0x41EC, r24	; 0x8041ec <uart_rx_buffer>
     480:	90 93 ed 41 	sts	0x41ED, r25	; 0x8041ed <uart_rx_buffer+0x1>
     484:	e0 91 ea 41 	lds	r30, 0x41EA	; 0x8041ea <active_usart>
     488:	f0 91 eb 41 	lds	r31, 0x41EB	; 0x8041eb <active_usart+0x1>
     48c:	30 97       	sbiw	r30, 0x00	; 0
     48e:	19 f0       	breq	.+6      	; 0x496 <uart_init+0x6e>
     490:	85 81       	ldd	r24, Z+5	; 0x05
     492:	80 68       	ori	r24, 0x80	; 128
     494:	85 83       	std	Z+5, r24	; 0x05
     496:	ce 01       	movw	r24, r28
     498:	df 91       	pop	r29
     49a:	cf 91       	pop	r28
     49c:	1f 91       	pop	r17
     49e:	0f 91       	pop	r16
     4a0:	ff 90       	pop	r15
     4a2:	ef 90       	pop	r14
     4a4:	08 95       	ret
     4a6:	e7 eb       	ldi	r30, 0xB7	; 183
     4a8:	f2 e4       	ldi	r31, 0x42	; 66
     4aa:	a6 e0       	ldi	r26, 0x06	; 6
     4ac:	b0 e4       	ldi	r27, 0x40	; 64
     4ae:	a2 83       	std	Z+2, r26	; 0x02
     4b0:	b3 83       	std	Z+3, r27	; 0x03
     4b2:	a0 83       	st	Z, r26
     4b4:	b1 83       	std	Z+1, r27	; 0x01
     4b6:	a4 83       	std	Z+4, r26	; 0x04
     4b8:	b5 83       	std	Z+5, r27	; 0x05
     4ba:	ed 01       	movw	r28, r26
     4bc:	c7 cf       	rjmp	.-114    	; 0x44c <uart_init+0x24>

000004be <usart_wait_until_transmit_ready>:
usart_wait_until_transmit_ready():
/home/artj/Documents/ECE3411uCLab/labs/circular_buffer_uart/circular_buffers_uart/include/uart.c:337

void usart_wait_until_transmit_ready(void *ptr) {
     4be:	fc 01       	movw	r30, r24
/home/artj/Documents/ECE3411uCLab/labs/circular_buffer_uart/circular_buffers_uart/include/uart.c:339 (discriminator 1)
  USART_t *usart = (USART_t *)ptr;
  loop_until_bit_is_set(usart->STATUS, USART_DREIF_bp);
     4c0:	94 81       	ldd	r25, Z+4	; 0x04
     4c2:	95 ff       	sbrs	r25, 5
     4c4:	fd cf       	rjmp	.-6      	; 0x4c0 <usart_wait_until_transmit_ready+0x2>
/home/artj/Documents/ECE3411uCLab/labs/circular_buffer_uart/circular_buffers_uart/include/uart.c:340
}
     4c6:	08 95       	ret

000004c8 <uart_putchar>:
uart_putchar():
/home/artj/Documents/ECE3411uCLab/labs/circular_buffer_uart/circular_buffers_uart/include/uart.c:152

/*
 * Send character c down the UART Tx, wait until tx holding register
 * is empty.
 */
int uart_putchar(char c, FILE *stream) {
     4c8:	0f 93       	push	r16
     4ca:	1f 93       	push	r17
     4cc:	cf 93       	push	r28
     4ce:	c8 2f       	mov	r28, r24
     4d0:	8b 01       	movw	r16, r22
/home/artj/Documents/ECE3411uCLab/labs/circular_buffer_uart/circular_buffers_uart/include/uart.c:153
  if (c == '\a') {
     4d2:	87 30       	cpi	r24, 0x07	; 7
     4d4:	81 f0       	breq	.+32     	; 0x4f6 <uart_putchar+0x2e>
/home/artj/Documents/ECE3411uCLab/labs/circular_buffer_uart/circular_buffers_uart/include/uart.c:158
    fputs("*ring*\n", stderr);
    return 0;
  }

  if (c == '\n') {
     4d6:	8a 30       	cpi	r24, 0x0A	; 10
     4d8:	d9 f0       	breq	.+54     	; 0x510 <uart_putchar+0x48>
/home/artj/Documents/ECE3411uCLab/labs/circular_buffer_uart/circular_buffers_uart/include/uart.c:162
    uart_putchar('\r', stream);
  }

  void *usart = fdev_get_udata(stream);
     4da:	f8 01       	movw	r30, r16
     4dc:	04 85       	ldd	r16, Z+12	; 0x0c
     4de:	15 85       	ldd	r17, Z+13	; 0x0d
/home/artj/Documents/ECE3411uCLab/labs/circular_buffer_uart/circular_buffers_uart/include/uart.c:163
  usart_wait_until_transmit_ready(usart);
     4e0:	c8 01       	movw	r24, r16
     4e2:	0e 94 5f 02 	call	0x4be	; 0x4be <usart_wait_until_transmit_ready>
usart_transmit_data():
/home/artj/Documents/ECE3411uCLab/labs/circular_buffer_uart/circular_buffers_uart/include/uart.c:334
  return usart;
}

void usart_transmit_data(void *ptr, char c) {
  USART_t *usart = (USART_t *)ptr;
  usart->TXDATAL = c;
     4e6:	f8 01       	movw	r30, r16
     4e8:	c2 83       	std	Z+2, r28	; 0x02
uart_putchar():
/home/artj/Documents/ECE3411uCLab/labs/circular_buffer_uart/circular_buffers_uart/include/uart.c:167
  void *usart = fdev_get_udata(stream);
  usart_wait_until_transmit_ready(usart);
  usart_transmit_data(usart, c);

  return 0;
}
     4ea:	90 e0       	ldi	r25, 0x00	; 0
     4ec:	80 e0       	ldi	r24, 0x00	; 0
     4ee:	cf 91       	pop	r28
     4f0:	1f 91       	pop	r17
     4f2:	0f 91       	pop	r16
     4f4:	08 95       	ret
/home/artj/Documents/ECE3411uCLab/labs/circular_buffer_uart/circular_buffers_uart/include/uart.c:154
 * Send character c down the UART Tx, wait until tx holding register
 * is empty.
 */
int uart_putchar(char c, FILE *stream) {
  if (c == '\a') {
    fputs("*ring*\n", stderr);
     4f6:	20 91 bb 42 	lds	r18, 0x42BB	; 0x8042bb <__iob+0x4>
     4fa:	30 91 bc 42 	lds	r19, 0x42BC	; 0x8042bc <__iob+0x5>
     4fe:	47 e0       	ldi	r20, 0x07	; 7
     500:	50 e0       	ldi	r21, 0x00	; 0
     502:	61 e0       	ldi	r22, 0x01	; 1
     504:	70 e0       	ldi	r23, 0x00	; 0
     506:	84 e1       	ldi	r24, 0x14	; 20
     508:	90 e4       	ldi	r25, 0x40	; 64
     50a:	0e 94 59 09 	call	0x12b2	; 0x12b2 <fwrite>
/home/artj/Documents/ECE3411uCLab/labs/circular_buffer_uart/circular_buffers_uart/include/uart.c:155
    return 0;
     50e:	ed cf       	rjmp	.-38     	; 0x4ea <uart_putchar+0x22>
/home/artj/Documents/ECE3411uCLab/labs/circular_buffer_uart/circular_buffers_uart/include/uart.c:159
  }

  if (c == '\n') {
    uart_putchar('\r', stream);
     510:	8d e0       	ldi	r24, 0x0D	; 13
     512:	0e 94 64 02 	call	0x4c8	; 0x4c8 <uart_putchar>
     516:	e1 cf       	rjmp	.-62     	; 0x4da <uart_putchar+0x12>

00000518 <usart_receive_data>:
usart_receive_data():
/home/artj/Documents/ECE3411uCLab/labs/circular_buffer_uart/circular_buffers_uart/include/uart.c:342
void usart_wait_until_transmit_ready(void *ptr) {
  USART_t *usart = (USART_t *)ptr;
  loop_until_bit_is_set(usart->STATUS, USART_DREIF_bp);
}

int usart_receive_data(void *ptr) {
     518:	fc 01       	movw	r30, r24
/home/artj/Documents/ECE3411uCLab/labs/circular_buffer_uart/circular_buffers_uart/include/uart.c:346 (discriminator 1)
  USART_t *usart = (USART_t *)ptr;

  uint8_t c;
  loop_until_bit_is_set(
     51a:	94 81       	ldd	r25, Z+4	; 0x04
     51c:	99 23       	and	r25, r25
     51e:	ec f7       	brge	.-6      	; 0x51a <usart_receive_data+0x2>
/home/artj/Documents/ECE3411uCLab/labs/circular_buffer_uart/circular_buffers_uart/include/uart.c:349
      usart->STATUS,
      USART_RXCIF_bp); // Loop until the Receive Complete Interrupt Flag is set
  char rcv_status = usart->RXDATAH; // Receive the High Byte of the data.
     520:	81 81       	ldd	r24, Z+1	; 0x01
/home/artj/Documents/ECE3411uCLab/labs/circular_buffer_uart/circular_buffers_uart/include/uart.c:351

  if (rcv_status & USART_FERR_bm) { // Frame Error
     522:	82 fd       	sbrc	r24, 2
     524:	05 c0       	rjmp	.+10     	; 0x530 <usart_receive_data+0x18>
/home/artj/Documents/ECE3411uCLab/labs/circular_buffer_uart/circular_buffers_uart/include/uart.c:355
    c = usart->RXDATAL;             /* clear error by reading data */
    return _FDEV_EOF;
  }
  if (rcv_status & USART_BUFOVF_bm) { // Buffer Overflow
     526:	86 fd       	sbrc	r24, 6
     528:	07 c0       	rjmp	.+14     	; 0x538 <usart_receive_data+0x20>
/home/artj/Documents/ECE3411uCLab/labs/circular_buffer_uart/circular_buffers_uart/include/uart.c:359
    c = usart->RXDATAL;               /* clear error by reading data */
    return _FDEV_ERR;
  }
  c = usart->RXDATAL; // c = the lower byte of the received data
     52a:	80 81       	ld	r24, Z
/home/artj/Documents/ECE3411uCLab/labs/circular_buffer_uart/circular_buffers_uart/include/uart.c:360
  return c;
     52c:	90 e0       	ldi	r25, 0x00	; 0
/home/artj/Documents/ECE3411uCLab/labs/circular_buffer_uart/circular_buffers_uart/include/uart.c:361
}
     52e:	08 95       	ret
/home/artj/Documents/ECE3411uCLab/labs/circular_buffer_uart/circular_buffers_uart/include/uart.c:352
      usart->STATUS,
      USART_RXCIF_bp); // Loop until the Receive Complete Interrupt Flag is set
  char rcv_status = usart->RXDATAH; // Receive the High Byte of the data.

  if (rcv_status & USART_FERR_bm) { // Frame Error
    c = usart->RXDATAL;             /* clear error by reading data */
     530:	80 81       	ld	r24, Z
/home/artj/Documents/ECE3411uCLab/labs/circular_buffer_uart/circular_buffers_uart/include/uart.c:353
    return _FDEV_EOF;
     532:	8e ef       	ldi	r24, 0xFE	; 254
     534:	9f ef       	ldi	r25, 0xFF	; 255
     536:	08 95       	ret
/home/artj/Documents/ECE3411uCLab/labs/circular_buffer_uart/circular_buffers_uart/include/uart.c:356
  }
  if (rcv_status & USART_BUFOVF_bm) { // Buffer Overflow
    c = usart->RXDATAL;               /* clear error by reading data */
     538:	80 81       	ld	r24, Z
/home/artj/Documents/ECE3411uCLab/labs/circular_buffer_uart/circular_buffers_uart/include/uart.c:357
    return _FDEV_ERR;
     53a:	8f ef       	ldi	r24, 0xFF	; 255
     53c:	9f ef       	ldi	r25, 0xFF	; 255
     53e:	08 95       	ret

00000540 <uart_getchar>:
uart_getchar():
/home/artj/Documents/ECE3411uCLab/labs/circular_buffer_uart/circular_buffers_uart/include/uart.c:202
 * parity recognition is supported by hardware).
 *
 * Successive calls to uart_getchar() will be satisfied from the
 * internal buffer until that buffer is emptied again.
 */
int uart_getchar(FILE *stream) {
     540:	9f 92       	push	r9
     542:	af 92       	push	r10
     544:	bf 92       	push	r11
     546:	cf 92       	push	r12
     548:	df 92       	push	r13
     54a:	ef 92       	push	r14
     54c:	ff 92       	push	r15
     54e:	0f 93       	push	r16
     550:	1f 93       	push	r17
     552:	cf 93       	push	r28
     554:	df 93       	push	r29
/home/artj/Documents/ECE3411uCLab/labs/circular_buffer_uart/circular_buffers_uart/include/uart.c:208
  uint8_t c;
  char *cp, *cp2;
  static char b[RX_BUFSIZE];
  static char *rxp;

  if (rxp == 0) {
     556:	20 91 e8 41 	lds	r18, 0x41E8	; 0x8041e8 <rxp.4515>
     55a:	30 91 e9 41 	lds	r19, 0x41E9	; 0x8041e9 <rxp.4515+0x1>
     55e:	23 2b       	or	r18, r19
     560:	d9 f0       	breq	.+54     	; 0x598 <uart_getchar+0x58>
/home/artj/Documents/ECE3411uCLab/labs/circular_buffer_uart/circular_buffers_uart/include/uart.c:275
        break;
      }
    }
  }

  c = *rxp++;
     562:	e0 91 e8 41 	lds	r30, 0x41E8	; 0x8041e8 <rxp.4515>
     566:	f0 91 e9 41 	lds	r31, 0x41E9	; 0x8041e9 <rxp.4515+0x1>
     56a:	cf 01       	movw	r24, r30
     56c:	01 96       	adiw	r24, 0x01	; 1
     56e:	80 93 e8 41 	sts	0x41E8, r24	; 0x8041e8 <rxp.4515>
     572:	90 93 e9 41 	sts	0x41E9, r25	; 0x8041e9 <rxp.4515+0x1>
     576:	80 81       	ld	r24, Z
/home/artj/Documents/ECE3411uCLab/labs/circular_buffer_uart/circular_buffers_uart/include/uart.c:276
  if (c == '\n')
     578:	8a 30       	cpi	r24, 0x0A	; 10
     57a:	09 f4       	brne	.+2      	; 0x57e <uart_getchar+0x3e>
     57c:	d1 c0       	rjmp	.+418    	; 0x720 <uart_getchar+0x1e0>
/home/artj/Documents/ECE3411uCLab/labs/circular_buffer_uart/circular_buffers_uart/include/uart.c:279
    rxp = 0;

  return c;
     57e:	90 e0       	ldi	r25, 0x00	; 0
/home/artj/Documents/ECE3411uCLab/labs/circular_buffer_uart/circular_buffers_uart/include/uart.c:280
}
     580:	df 91       	pop	r29
     582:	cf 91       	pop	r28
     584:	1f 91       	pop	r17
     586:	0f 91       	pop	r16
     588:	ff 90       	pop	r15
     58a:	ef 90       	pop	r14
     58c:	df 90       	pop	r13
     58e:	cf 90       	pop	r12
     590:	bf 90       	pop	r11
     592:	af 90       	pop	r10
     594:	9f 90       	pop	r9
     596:	08 95       	ret
     598:	ec 01       	movw	r28, r24
/home/artj/Documents/ECE3411uCLab/labs/circular_buffer_uart/circular_buffers_uart/include/uart.c:209
  char *cp, *cp2;
  static char b[RX_BUFSIZE];
  static char *rxp;

  if (rxp == 0) {
    for (cp = b;;) {
     59a:	08 e9       	ldi	r16, 0x98	; 152
     59c:	11 e4       	ldi	r17, 0x41	; 65
/home/artj/Documents/ECE3411uCLab/labs/circular_buffer_uart/circular_buffers_uart/include/uart.c:222
        *cp = c;
        uart_putchar(c, stream);
        rxp = b;
        break;
      } else if (c == '\t')
        c = ' ';
     59e:	68 94       	set
     5a0:	99 24       	eor	r9, r9
     5a2:	95 f8       	bld	r9, 5
     5a4:	68 01       	movw	r12, r16
     5a6:	0f 2e       	mov	r0, r31
     5a8:	f7 e9       	ldi	r31, 0x97	; 151
     5aa:	af 2e       	mov	r10, r31
     5ac:	f1 e4       	ldi	r31, 0x41	; 65
     5ae:	bf 2e       	mov	r11, r31
     5b0:	f0 2d       	mov	r31, r0
     5b2:	1d c0       	rjmp	.+58     	; 0x5ee <uart_getchar+0xae>
/home/artj/Documents/ECE3411uCLab/labs/circular_buffer_uart/circular_buffers_uart/include/uart.c:217

      /* behaviour similar to Unix stty ICRNL */
      if (c == '\r')
        c = '\n';
      if (c == '\n') {
        *cp = c;
     5b4:	8a e0       	ldi	r24, 0x0A	; 10
     5b6:	f8 01       	movw	r30, r16
     5b8:	80 83       	st	Z, r24
/home/artj/Documents/ECE3411uCLab/labs/circular_buffer_uart/circular_buffers_uart/include/uart.c:218
        uart_putchar(c, stream);
     5ba:	be 01       	movw	r22, r28
     5bc:	0e 94 64 02 	call	0x4c8	; 0x4c8 <uart_putchar>
/home/artj/Documents/ECE3411uCLab/labs/circular_buffer_uart/circular_buffers_uart/include/uart.c:219
        rxp = b;
     5c0:	88 e9       	ldi	r24, 0x98	; 152
     5c2:	91 e4       	ldi	r25, 0x41	; 65
     5c4:	80 93 e8 41 	sts	0x41E8, r24	; 0x8041e8 <rxp.4515>
     5c8:	90 93 e9 41 	sts	0x41E9, r25	; 0x8041e9 <rxp.4515+0x1>
/home/artj/Documents/ECE3411uCLab/labs/circular_buffer_uart/circular_buffers_uart/include/uart.c:220
        break;
     5cc:	ca cf       	rjmp	.-108    	; 0x562 <uart_getchar+0x22>
/home/artj/Documents/ECE3411uCLab/labs/circular_buffer_uart/circular_buffers_uart/include/uart.c:222
      } else if (c == '\t')
        c = ' ';
     5ce:	89 2d       	mov	r24, r9
/home/artj/Documents/ECE3411uCLab/labs/circular_buffer_uart/circular_buffers_uart/include/uart.c:225

      if ((c >= (uint8_t)' ' && c <= (uint8_t)'\x7e') || c >= (uint8_t)'\xa0') {
        if (cp == b + RX_BUFSIZE - 1)
     5d0:	f1 e4       	ldi	r31, 0x41	; 65
     5d2:	07 3e       	cpi	r16, 0xE7	; 231
     5d4:	1f 07       	cpc	r17, r31
     5d6:	09 f4       	brne	.+2      	; 0x5da <uart_getchar+0x9a>
     5d8:	40 c0       	rjmp	.+128    	; 0x65a <uart_getchar+0x11a>
/home/artj/Documents/ECE3411uCLab/labs/circular_buffer_uart/circular_buffers_uart/include/uart.c:228
          uart_putchar('\a', stream);
        else {
          *cp++ = c;
     5da:	78 01       	movw	r14, r16
     5dc:	9f ef       	ldi	r25, 0xFF	; 255
     5de:	e9 1a       	sub	r14, r25
     5e0:	f9 0a       	sbc	r15, r25
     5e2:	f8 01       	movw	r30, r16
     5e4:	80 83       	st	Z, r24
/home/artj/Documents/ECE3411uCLab/labs/circular_buffer_uart/circular_buffers_uart/include/uart.c:229
          uart_putchar(c, stream);
     5e6:	be 01       	movw	r22, r28
     5e8:	0e 94 64 02 	call	0x4c8	; 0x4c8 <uart_putchar>
/home/artj/Documents/ECE3411uCLab/labs/circular_buffer_uart/circular_buffers_uart/include/uart.c:228

      if ((c >= (uint8_t)' ' && c <= (uint8_t)'\x7e') || c >= (uint8_t)'\xa0') {
        if (cp == b + RX_BUFSIZE - 1)
          uart_putchar('\a', stream);
        else {
          *cp++ = c;
     5ec:	87 01       	movw	r16, r14
/home/artj/Documents/ECE3411uCLab/labs/circular_buffer_uart/circular_buffers_uart/include/uart.c:211
  static char *rxp;

  if (rxp == 0) {
    for (cp = b;;) {
      void *usart = fdev_get_udata(stream);
      c = usart_receive_data(usart);
     5ee:	8c 85       	ldd	r24, Y+12	; 0x0c
     5f0:	9d 85       	ldd	r25, Y+13	; 0x0d
     5f2:	0e 94 8c 02 	call	0x518	; 0x518 <usart_receive_data>
/home/artj/Documents/ECE3411uCLab/labs/circular_buffer_uart/circular_buffers_uart/include/uart.c:214

      /* behaviour similar to Unix stty ICRNL */
      if (c == '\r')
     5f6:	8d 30       	cpi	r24, 0x0D	; 13
     5f8:	e9 f2       	breq	.-70     	; 0x5b4 <uart_getchar+0x74>
/home/artj/Documents/ECE3411uCLab/labs/circular_buffer_uart/circular_buffers_uart/include/uart.c:216
        c = '\n';
      if (c == '\n') {
     5fa:	8a 30       	cpi	r24, 0x0A	; 10
     5fc:	d9 f2       	breq	.-74     	; 0x5b4 <uart_getchar+0x74>
/home/artj/Documents/ECE3411uCLab/labs/circular_buffer_uart/circular_buffers_uart/include/uart.c:221
        *cp = c;
        uart_putchar(c, stream);
        rxp = b;
        break;
      } else if (c == '\t')
     5fe:	89 30       	cpi	r24, 0x09	; 9
     600:	31 f3       	breq	.-52     	; 0x5ce <uart_getchar+0x8e>
/home/artj/Documents/ECE3411uCLab/labs/circular_buffer_uart/circular_buffers_uart/include/uart.c:224
        c = ' ';

      if ((c >= (uint8_t)' ' && c <= (uint8_t)'\x7e') || c >= (uint8_t)'\xa0') {
     602:	90 ee       	ldi	r25, 0xE0	; 224
     604:	98 0f       	add	r25, r24
     606:	9f 35       	cpi	r25, 0x5F	; 95
     608:	18 f3       	brcs	.-58     	; 0x5d0 <uart_getchar+0x90>
/home/artj/Documents/ECE3411uCLab/labs/circular_buffer_uart/circular_buffers_uart/include/uart.c:224 (discriminator 1)
     60a:	80 3a       	cpi	r24, 0xA0	; 160
     60c:	08 f7       	brcc	.-62     	; 0x5d0 <uart_getchar+0x90>
/home/artj/Documents/ECE3411uCLab/labs/circular_buffer_uart/circular_buffers_uart/include/uart.c:234
          uart_putchar(c, stream);
        }
        continue;
      }

      switch (c) {
     60e:	82 31       	cpi	r24, 0x12	; 18
     610:	09 f4       	brne	.+2      	; 0x614 <uart_getchar+0xd4>
     612:	6c c0       	rjmp	.+216    	; 0x6ec <uart_getchar+0x1ac>
     614:	48 f1       	brcs	.+82     	; 0x668 <uart_getchar+0x128>
     616:	87 31       	cpi	r24, 0x17	; 23
     618:	09 f4       	brne	.+2      	; 0x61c <uart_getchar+0xdc>
     61a:	41 c0       	rjmp	.+130    	; 0x69e <uart_getchar+0x15e>
     61c:	8f 37       	cpi	r24, 0x7F	; 127
     61e:	51 f1       	breq	.+84     	; 0x674 <uart_getchar+0x134>
     620:	85 31       	cpi	r24, 0x15	; 21
     622:	29 f7       	brne	.-54     	; 0x5ee <uart_getchar+0xae>
/home/artj/Documents/ECE3411uCLab/labs/circular_buffer_uart/circular_buffers_uart/include/uart.c:255
        for (cp2 = b; cp2 < cp; cp2++)
          uart_putchar(*cp2, stream);
        break;

      case 'u' & 0x1f:
        while (cp > b) {
     624:	81 e4       	ldi	r24, 0x41	; 65
     626:	08 39       	cpi	r16, 0x98	; 152
     628:	18 07       	cpc	r17, r24
     62a:	09 f3       	breq	.-62     	; 0x5ee <uart_getchar+0xae>
     62c:	00 f3       	brcs	.-64     	; 0x5ee <uart_getchar+0xae>
/home/artj/Documents/ECE3411uCLab/labs/circular_buffer_uart/circular_buffers_uart/include/uart.c:256
          uart_putchar('\b', stream);
     62e:	be 01       	movw	r22, r28
     630:	88 e0       	ldi	r24, 0x08	; 8
     632:	0e 94 64 02 	call	0x4c8	; 0x4c8 <uart_putchar>
/home/artj/Documents/ECE3411uCLab/labs/circular_buffer_uart/circular_buffers_uart/include/uart.c:257
          uart_putchar(' ', stream);
     636:	be 01       	movw	r22, r28
     638:	89 2d       	mov	r24, r9
     63a:	0e 94 64 02 	call	0x4c8	; 0x4c8 <uart_putchar>
/home/artj/Documents/ECE3411uCLab/labs/circular_buffer_uart/circular_buffers_uart/include/uart.c:258
          uart_putchar('\b', stream);
     63e:	be 01       	movw	r22, r28
     640:	88 e0       	ldi	r24, 0x08	; 8
     642:	0e 94 64 02 	call	0x4c8	; 0x4c8 <uart_putchar>
/home/artj/Documents/ECE3411uCLab/labs/circular_buffer_uart/circular_buffers_uart/include/uart.c:259
          cp--;
     646:	01 50       	subi	r16, 0x01	; 1
     648:	11 09       	sbc	r17, r1
/home/artj/Documents/ECE3411uCLab/labs/circular_buffer_uart/circular_buffers_uart/include/uart.c:255
        for (cp2 = b; cp2 < cp; cp2++)
          uart_putchar(*cp2, stream);
        break;

      case 'u' & 0x1f:
        while (cp > b) {
     64a:	f1 e4       	ldi	r31, 0x41	; 65
     64c:	08 39       	cpi	r16, 0x98	; 152
     64e:	1f 07       	cpc	r17, r31
     650:	71 f7       	brne	.-36     	; 0x62e <uart_getchar+0xee>
     652:	85 01       	movw	r16, r10
     654:	0f 5f       	subi	r16, 0xFF	; 255
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ca cf       	rjmp	.-108    	; 0x5ee <uart_getchar+0xae>
/home/artj/Documents/ECE3411uCLab/labs/circular_buffer_uart/circular_buffers_uart/include/uart.c:226
      } else if (c == '\t')
        c = ' ';

      if ((c >= (uint8_t)' ' && c <= (uint8_t)'\x7e') || c >= (uint8_t)'\xa0') {
        if (cp == b + RX_BUFSIZE - 1)
          uart_putchar('\a', stream);
     65a:	be 01       	movw	r22, r28
     65c:	87 e0       	ldi	r24, 0x07	; 7
     65e:	0e 94 64 02 	call	0x4c8	; 0x4c8 <uart_putchar>
     662:	07 ee       	ldi	r16, 0xE7	; 231
     664:	11 e4       	ldi	r17, 0x41	; 65
     666:	c3 cf       	rjmp	.-122    	; 0x5ee <uart_getchar+0xae>
/home/artj/Documents/ECE3411uCLab/labs/circular_buffer_uart/circular_buffers_uart/include/uart.c:234
          uart_putchar(c, stream);
        }
        continue;
      }

      switch (c) {
     668:	83 30       	cpi	r24, 0x03	; 3
     66a:	09 f4       	brne	.+2      	; 0x66e <uart_getchar+0x12e>
     66c:	5e c0       	rjmp	.+188    	; 0x72a <uart_getchar+0x1ea>
     66e:	88 30       	cpi	r24, 0x08	; 8
     670:	09 f0       	breq	.+2      	; 0x674 <uart_getchar+0x134>
     672:	bd cf       	rjmp	.-134    	; 0x5ee <uart_getchar+0xae>
/home/artj/Documents/ECE3411uCLab/labs/circular_buffer_uart/circular_buffers_uart/include/uart.c:240
      case 'c' & 0x1f:
        return -1;

      case '\b':
      case '\x7f':
        if (cp > b) {
     674:	91 e4       	ldi	r25, 0x41	; 65
     676:	08 39       	cpi	r16, 0x98	; 152
     678:	19 07       	cpc	r17, r25
     67a:	09 f0       	breq	.+2      	; 0x67e <uart_getchar+0x13e>
     67c:	08 f4       	brcc	.+2      	; 0x680 <uart_getchar+0x140>
     67e:	b7 cf       	rjmp	.-146    	; 0x5ee <uart_getchar+0xae>
/home/artj/Documents/ECE3411uCLab/labs/circular_buffer_uart/circular_buffers_uart/include/uart.c:241
          uart_putchar('\b', stream);
     680:	be 01       	movw	r22, r28
     682:	88 e0       	ldi	r24, 0x08	; 8
     684:	0e 94 64 02 	call	0x4c8	; 0x4c8 <uart_putchar>
/home/artj/Documents/ECE3411uCLab/labs/circular_buffer_uart/circular_buffers_uart/include/uart.c:242
          uart_putchar(' ', stream);
     688:	be 01       	movw	r22, r28
     68a:	89 2d       	mov	r24, r9
     68c:	0e 94 64 02 	call	0x4c8	; 0x4c8 <uart_putchar>
/home/artj/Documents/ECE3411uCLab/labs/circular_buffer_uart/circular_buffers_uart/include/uart.c:243
          uart_putchar('\b', stream);
     690:	be 01       	movw	r22, r28
     692:	88 e0       	ldi	r24, 0x08	; 8
     694:	0e 94 64 02 	call	0x4c8	; 0x4c8 <uart_putchar>
/home/artj/Documents/ECE3411uCLab/labs/circular_buffer_uart/circular_buffers_uart/include/uart.c:244
          cp--;
     698:	01 50       	subi	r16, 0x01	; 1
     69a:	11 09       	sbc	r17, r1
     69c:	a8 cf       	rjmp	.-176    	; 0x5ee <uart_getchar+0xae>
/home/artj/Documents/ECE3411uCLab/labs/circular_buffer_uart/circular_buffers_uart/include/uart.c:264
          cp--;
        }
        break;

      case 'w' & 0x1f:
        while (cp > b && cp[-1] != ' ') {
     69e:	f1 e4       	ldi	r31, 0x41	; 65
     6a0:	08 39       	cpi	r16, 0x98	; 152
     6a2:	1f 07       	cpc	r17, r31
     6a4:	09 f0       	breq	.+2      	; 0x6a8 <uart_getchar+0x168>
     6a6:	08 f4       	brcc	.+2      	; 0x6aa <uart_getchar+0x16a>
     6a8:	a2 cf       	rjmp	.-188    	; 0x5ee <uart_getchar+0xae>
     6aa:	f8 01       	movw	r30, r16
     6ac:	31 97       	sbiw	r30, 0x01	; 1
     6ae:	80 81       	ld	r24, Z
     6b0:	80 32       	cpi	r24, 0x20	; 32
     6b2:	09 f4       	brne	.+2      	; 0x6b6 <uart_getchar+0x176>
     6b4:	9c cf       	rjmp	.-200    	; 0x5ee <uart_getchar+0xae>
     6b6:	78 01       	movw	r14, r16
     6b8:	81 e0       	ldi	r24, 0x01	; 1
     6ba:	e8 1a       	sub	r14, r24
     6bc:	f1 08       	sbc	r15, r1
/home/artj/Documents/ECE3411uCLab/labs/circular_buffer_uart/circular_buffers_uart/include/uart.c:265
          uart_putchar('\b', stream);
     6be:	be 01       	movw	r22, r28
     6c0:	88 e0       	ldi	r24, 0x08	; 8
     6c2:	0e 94 64 02 	call	0x4c8	; 0x4c8 <uart_putchar>
/home/artj/Documents/ECE3411uCLab/labs/circular_buffer_uart/circular_buffers_uart/include/uart.c:266
          uart_putchar(' ', stream);
     6c6:	be 01       	movw	r22, r28
     6c8:	89 2d       	mov	r24, r9
     6ca:	0e 94 64 02 	call	0x4c8	; 0x4c8 <uart_putchar>
/home/artj/Documents/ECE3411uCLab/labs/circular_buffer_uart/circular_buffers_uart/include/uart.c:267
          uart_putchar('\b', stream);
     6ce:	be 01       	movw	r22, r28
     6d0:	88 e0       	ldi	r24, 0x08	; 8
     6d2:	0e 94 64 02 	call	0x4c8	; 0x4c8 <uart_putchar>
/home/artj/Documents/ECE3411uCLab/labs/circular_buffer_uart/circular_buffers_uart/include/uart.c:268
          cp--;
     6d6:	87 01       	movw	r16, r14
/home/artj/Documents/ECE3411uCLab/labs/circular_buffer_uart/circular_buffers_uart/include/uart.c:264
          cp--;
        }
        break;

      case 'w' & 0x1f:
        while (cp > b && cp[-1] != ' ') {
     6d8:	ec 14       	cp	r14, r12
     6da:	fd 04       	cpc	r15, r13
     6dc:	09 f4       	brne	.+2      	; 0x6e0 <uart_getchar+0x1a0>
     6de:	87 cf       	rjmp	.-242    	; 0x5ee <uart_getchar+0xae>
/home/artj/Documents/ECE3411uCLab/labs/circular_buffer_uart/circular_buffers_uart/include/uart.c:264 (discriminator 1)
     6e0:	f7 01       	movw	r30, r14
     6e2:	82 91       	ld	r24, -Z
     6e4:	7f 01       	movw	r14, r30
     6e6:	80 32       	cpi	r24, 0x20	; 32
     6e8:	51 f7       	brne	.-44     	; 0x6be <uart_getchar+0x17e>
     6ea:	81 cf       	rjmp	.-254    	; 0x5ee <uart_getchar+0xae>
/home/artj/Documents/ECE3411uCLab/labs/circular_buffer_uart/circular_buffers_uart/include/uart.c:249
          cp--;
        }
        break;

      case 'r' & 0x1f:
        uart_putchar('\r', stream);
     6ec:	be 01       	movw	r22, r28
     6ee:	8d e0       	ldi	r24, 0x0D	; 13
     6f0:	0e 94 64 02 	call	0x4c8	; 0x4c8 <uart_putchar>
/home/artj/Documents/ECE3411uCLab/labs/circular_buffer_uart/circular_buffers_uart/include/uart.c:250
        for (cp2 = b; cp2 < cp; cp2++)
     6f4:	e1 e4       	ldi	r30, 0x41	; 65
     6f6:	08 39       	cpi	r16, 0x98	; 152
     6f8:	1e 07       	cpc	r17, r30
     6fa:	09 f0       	breq	.+2      	; 0x6fe <uart_getchar+0x1be>
     6fc:	08 f4       	brcc	.+2      	; 0x700 <uart_getchar+0x1c0>
     6fe:	77 cf       	rjmp	.-274    	; 0x5ee <uart_getchar+0xae>
     700:	0f 2e       	mov	r0, r31
     702:	f8 e9       	ldi	r31, 0x98	; 152
     704:	ef 2e       	mov	r14, r31
     706:	f1 e4       	ldi	r31, 0x41	; 65
     708:	ff 2e       	mov	r15, r31
     70a:	f0 2d       	mov	r31, r0
/home/artj/Documents/ECE3411uCLab/labs/circular_buffer_uart/circular_buffers_uart/include/uart.c:251 (discriminator 3)
          uart_putchar(*cp2, stream);
     70c:	be 01       	movw	r22, r28
     70e:	f7 01       	movw	r30, r14
     710:	81 91       	ld	r24, Z+
     712:	7f 01       	movw	r14, r30
     714:	0e 94 64 02 	call	0x4c8	; 0x4c8 <uart_putchar>
/home/artj/Documents/ECE3411uCLab/labs/circular_buffer_uart/circular_buffers_uart/include/uart.c:250 (discriminator 3)
        }
        break;

      case 'r' & 0x1f:
        uart_putchar('\r', stream);
        for (cp2 = b; cp2 < cp; cp2++)
     718:	0e 15       	cp	r16, r14
     71a:	1f 05       	cpc	r17, r15
     71c:	b9 f7       	brne	.-18     	; 0x70c <uart_getchar+0x1cc>
     71e:	67 cf       	rjmp	.-306    	; 0x5ee <uart_getchar+0xae>
/home/artj/Documents/ECE3411uCLab/labs/circular_buffer_uart/circular_buffers_uart/include/uart.c:277
    }
  }

  c = *rxp++;
  if (c == '\n')
    rxp = 0;
     720:	10 92 e8 41 	sts	0x41E8, r1	; 0x8041e8 <rxp.4515>
     724:	10 92 e9 41 	sts	0x41E9, r1	; 0x8041e9 <rxp.4515+0x1>
     728:	2a cf       	rjmp	.-428    	; 0x57e <uart_getchar+0x3e>
/home/artj/Documents/ECE3411uCLab/labs/circular_buffer_uart/circular_buffers_uart/include/uart.c:236
        continue;
      }

      switch (c) {
      case 'c' & 0x1f:
        return -1;
     72a:	8f ef       	ldi	r24, 0xFF	; 255
     72c:	9f ef       	ldi	r25, 0xFF	; 255
     72e:	28 cf       	rjmp	.-432    	; 0x580 <uart_getchar+0x40>

00000730 <init_led>:
init_led():
/home/artj/Documents/ECE3411uCLab/labs/circular_buffer_uart/circular_buffers_uart/main.c:26

//********************************
// LED And Button Initialization
//********************************
void init_led() {
  PORTD.DIRSET = 0xFF; // Connect 8 LEDs to PD 0 ~ 7 and set up as output.
     730:	e0 e6       	ldi	r30, 0x60	; 96
     732:	f4 e0       	ldi	r31, 0x04	; 4
     734:	8f ef       	ldi	r24, 0xFF	; 255
     736:	81 83       	std	Z+1, r24	; 0x01
/home/artj/Documents/ECE3411uCLab/labs/circular_buffer_uart/circular_buffers_uart/main.c:27
  PORTD.OUTCLR = 0xFF; // all off
     738:	86 83       	std	Z+6, r24	; 0x06
/home/artj/Documents/ECE3411uCLab/labs/circular_buffer_uart/circular_buffers_uart/main.c:28
  PORTC.DIRSET = PIN6_bm | PIN7_bm; // PC6 & PC7 as output
     73a:	e0 e4       	ldi	r30, 0x40	; 64
     73c:	f4 e0       	ldi	r31, 0x04	; 4
     73e:	80 ec       	ldi	r24, 0xC0	; 192
     740:	81 83       	std	Z+1, r24	; 0x01
/home/artj/Documents/ECE3411uCLab/labs/circular_buffer_uart/circular_buffers_uart/main.c:29
  PORTC.OUTCLR = PIN6_bm | PIN7_bm; // all off
     742:	86 83       	std	Z+6, r24	; 0x06
/home/artj/Documents/ECE3411uCLab/labs/circular_buffer_uart/circular_buffers_uart/main.c:30
}
     744:	08 95       	ret

00000746 <__vector_53>:
__vector_53():
/home/artj/Documents/ECE3411uCLab/labs/circular_buffer_uart/circular_buffers_uart/main.c:95
// USART Interrupt Service Routines
// USART3_RXC_vect Receive Complete Interrupt
// USART3_DRE_vect Data Register Empty Interrupt
// USART3_TXC_vect Transmit Complete Interrupt
// ********************************
ISR(USART3_RXC_vect) {
     746:	1f 92       	push	r1
     748:	0f 92       	push	r0
     74a:	0f b6       	in	r0, 0x3f	; 63
     74c:	0f 92       	push	r0
     74e:	11 24       	eor	r1, r1
     750:	0b b6       	in	r0, 0x3b	; 59
     752:	0f 92       	push	r0
     754:	2f 93       	push	r18
     756:	3f 93       	push	r19
     758:	4f 93       	push	r20
     75a:	5f 93       	push	r21
     75c:	6f 93       	push	r22
     75e:	7f 93       	push	r23
     760:	8f 93       	push	r24
     762:	9f 93       	push	r25
     764:	af 93       	push	r26
     766:	bf 93       	push	r27
     768:	ef 93       	push	r30
     76a:	ff 93       	push	r31
/home/artj/Documents/ECE3411uCLab/labs/circular_buffer_uart/circular_buffers_uart/main.c:97
  // if we have received all the data, call the handler
  char receivedChar = USART3.RXDATAL; // Read received character
     76c:	80 91 60 08 	lds	r24, 0x0860	; 0x800860 <__TEXT_REGION_LENGTH__+0x7e0860>
/home/artj/Documents/ECE3411uCLab/labs/circular_buffer_uart/circular_buffers_uart/main.c:98
  uart_rx_isr_handler(receivedChar);
     770:	0e 94 8c 01 	call	0x318	; 0x318 <uart_rx_isr_handler>
/home/artj/Documents/ECE3411uCLab/labs/circular_buffer_uart/circular_buffers_uart/main.c:99
}
     774:	ff 91       	pop	r31
     776:	ef 91       	pop	r30
     778:	bf 91       	pop	r27
     77a:	af 91       	pop	r26
     77c:	9f 91       	pop	r25
     77e:	8f 91       	pop	r24
     780:	7f 91       	pop	r23
     782:	6f 91       	pop	r22
     784:	5f 91       	pop	r21
     786:	4f 91       	pop	r20
     788:	3f 91       	pop	r19
     78a:	2f 91       	pop	r18
     78c:	0f 90       	pop	r0
     78e:	0b be       	out	0x3b, r0	; 59
     790:	0f 90       	pop	r0
     792:	0f be       	out	0x3f, r0	; 63
     794:	0f 90       	pop	r0
     796:	1f 90       	pop	r1
     798:	18 95       	reti

0000079a <__vector_54>:
__vector_54():
/home/artj/Documents/ECE3411uCLab/labs/circular_buffer_uart/circular_buffers_uart/main.c:101

ISR(USART3_DRE_vect) {
     79a:	1f 92       	push	r1
     79c:	0f 92       	push	r0
     79e:	0f b6       	in	r0, 0x3f	; 63
     7a0:	0f 92       	push	r0
     7a2:	11 24       	eor	r1, r1
     7a4:	0b b6       	in	r0, 0x3b	; 59
     7a6:	0f 92       	push	r0
     7a8:	2f 93       	push	r18
     7aa:	3f 93       	push	r19
     7ac:	4f 93       	push	r20
     7ae:	5f 93       	push	r21
     7b0:	6f 93       	push	r22
     7b2:	7f 93       	push	r23
     7b4:	8f 93       	push	r24
     7b6:	9f 93       	push	r25
     7b8:	af 93       	push	r26
     7ba:	bf 93       	push	r27
     7bc:	ef 93       	push	r30
     7be:	ff 93       	push	r31
     7c0:	cf 93       	push	r28
     7c2:	df 93       	push	r29
     7c4:	1f 92       	push	r1
     7c6:	cd b7       	in	r28, 0x3d	; 61
     7c8:	de b7       	in	r29, 0x3e	; 62
/home/artj/Documents/ECE3411uCLab/labs/circular_buffer_uart/circular_buffers_uart/main.c:104
  // if the data register is empty and we have data to send, send it.
  char data_to_send;
  if (uart_tx_isr_handler(&data_to_send)) {
     7ca:	ce 01       	movw	r24, r28
     7cc:	01 96       	adiw	r24, 0x01	; 1
     7ce:	0e 94 98 01 	call	0x330	; 0x330 <uart_tx_isr_handler>
     7d2:	81 11       	cpse	r24, r1
     7d4:	1b c0       	rjmp	.+54     	; 0x80c <__vector_54+0x72>
/home/artj/Documents/ECE3411uCLab/labs/circular_buffer_uart/circular_buffers_uart/main.c:107
    USART3.TXDATAL = data_to_send; // Send next character
  } else {
    USART3.CTRLA &= ~USART_DREIE_bm; // Disable DRE interrupt if buffer empty
     7d6:	e0 e6       	ldi	r30, 0x60	; 96
     7d8:	f8 e0       	ldi	r31, 0x08	; 8
     7da:	85 81       	ldd	r24, Z+5	; 0x05
     7dc:	8f 7d       	andi	r24, 0xDF	; 223
     7de:	85 83       	std	Z+5, r24	; 0x05
/home/artj/Documents/ECE3411uCLab/labs/circular_buffer_uart/circular_buffers_uart/main.c:109
  }
}
     7e0:	0f 90       	pop	r0
     7e2:	df 91       	pop	r29
     7e4:	cf 91       	pop	r28
     7e6:	ff 91       	pop	r31
     7e8:	ef 91       	pop	r30
     7ea:	bf 91       	pop	r27
     7ec:	af 91       	pop	r26
     7ee:	9f 91       	pop	r25
     7f0:	8f 91       	pop	r24
     7f2:	7f 91       	pop	r23
     7f4:	6f 91       	pop	r22
     7f6:	5f 91       	pop	r21
     7f8:	4f 91       	pop	r20
     7fa:	3f 91       	pop	r19
     7fc:	2f 91       	pop	r18
     7fe:	0f 90       	pop	r0
     800:	0b be       	out	0x3b, r0	; 59
     802:	0f 90       	pop	r0
     804:	0f be       	out	0x3f, r0	; 63
     806:	0f 90       	pop	r0
     808:	1f 90       	pop	r1
     80a:	18 95       	reti
/home/artj/Documents/ECE3411uCLab/labs/circular_buffer_uart/circular_buffers_uart/main.c:105

ISR(USART3_DRE_vect) {
  // if the data register is empty and we have data to send, send it.
  char data_to_send;
  if (uart_tx_isr_handler(&data_to_send)) {
    USART3.TXDATAL = data_to_send; // Send next character
     80c:	89 81       	ldd	r24, Y+1	; 0x01
     80e:	80 93 62 08 	sts	0x0862, r24	; 0x800862 <__TEXT_REGION_LENGTH__+0x7e0862>
     812:	e6 cf       	rjmp	.-52     	; 0x7e0 <__vector_54+0x46>

00000814 <main>:
main():
/home/artj/Documents/ECE3411uCLab/labs/circular_buffer_uart/circular_buffers_uart/main.c:235
    break;
  }
}
// ****************************************************************************

int main(void) {
     814:	cf 93       	push	r28
     816:	df 93       	push	r29
     818:	1f 92       	push	r1
     81a:	cd b7       	in	r28, 0x3d	; 61
     81c:	de b7       	in	r29, 0x3e	; 62
init_cpu():
/home/artj/Documents/ECE3411uCLab/labs/circular_buffer_uart/circular_buffers_uart/main.c:83
  CLKCTRL.OSCHFCTRLA = CLKCTRL_FRQSEL_16M_gc; // internal HF osc 16 MHz
}
*/

static inline void init_cpu(void) {
  CPU_CCP = CCP_IOREG_gc;
     81e:	88 ed       	ldi	r24, 0xD8	; 216
     820:	84 bf       	out	0x34, r24	; 52
/home/artj/Documents/ECE3411uCLab/labs/circular_buffer_uart/circular_buffers_uart/main.c:84
  CLKCTRL.XOSCHFCTRLA = CLKCTRL_FRQRANGE_16M_gc | CLKCTRL_ENABLE_bm;
     822:	e0 e6       	ldi	r30, 0x60	; 96
     824:	f0 e0       	ldi	r31, 0x00	; 0
     826:	95 e0       	ldi	r25, 0x05	; 5
     828:	90 a3       	std	Z+32, r25	; 0x20
/home/artj/Documents/ECE3411uCLab/labs/circular_buffer_uart/circular_buffers_uart/main.c:85
  CPU_CCP = CCP_IOREG_gc;
     82a:	84 bf       	out	0x34, r24	; 52
/home/artj/Documents/ECE3411uCLab/labs/circular_buffer_uart/circular_buffers_uart/main.c:86
  CLKCTRL.MCLKCTRLA = CLKCTRL_CLKSEL_EXTCLK_gc;
     82c:	83 e0       	ldi	r24, 0x03	; 3
     82e:	80 83       	st	Z, r24
main():
/home/artj/Documents/ECE3411uCLab/labs/circular_buffer_uart/circular_buffers_uart/main.c:238
// ****************************************************************************

int main(void) {
  uint32_t F_CLK_PER = F_CPU;
  init_cpu();
  init_led();
     830:	0e 94 98 03 	call	0x730	; 0x730 <init_led>
/home/artj/Documents/ECE3411uCLab/labs/circular_buffer_uart/circular_buffers_uart/main.c:241
  /* Initialize UART stdio on USART3 @ 9600 8N1 */
  /* (uart_init now automatically enables RX interrupt for unified API) */
  uart_init(3, 9600, F_CLK_PER, NULL);
     834:	f1 2c       	mov	r15, r1
     836:	e1 2c       	mov	r14, r1
     838:	00 e0       	ldi	r16, 0x00	; 0
     83a:	14 e2       	ldi	r17, 0x24	; 36
     83c:	24 ef       	ldi	r18, 0xF4	; 244
     83e:	30 e0       	ldi	r19, 0x00	; 0
     840:	40 e8       	ldi	r20, 0x80	; 128
     842:	55 e2       	ldi	r21, 0x25	; 37
     844:	60 e0       	ldi	r22, 0x00	; 0
     846:	70 e0       	ldi	r23, 0x00	; 0
     848:	83 e0       	ldi	r24, 0x03	; 3
     84a:	0e 94 14 02 	call	0x428	; 0x428 <uart_init>
/home/artj/Documents/ECE3411uCLab/labs/circular_buffer_uart/circular_buffers_uart/main.c:243

  sei(); // Enable global Interrupts
     84e:	78 94       	sei
/home/artj/Documents/ECE3411uCLab/labs/circular_buffer_uart/circular_buffers_uart/main.c:244
  printf("UART Interrupt-Driven LED Blinker Initialized.\n");
     850:	8c e1       	ldi	r24, 0x1C	; 28
     852:	90 e4       	ldi	r25, 0x40	; 64
     854:	0e 94 b1 09 	call	0x1362	; 0x1362 <puts>
/home/artj/Documents/ECE3411uCLab/labs/circular_buffer_uart/circular_buffers_uart/main.c:245
  printf("Setting up interrrrrnaaalll pointerrr varrraiblee\n");
     858:	8b e4       	ldi	r24, 0x4B	; 75
     85a:	90 e4       	ldi	r25, 0x40	; 64
     85c:	0e 94 b1 09 	call	0x1362	; 0x1362 <puts>
leds_set_position():
/home/artj/Documents/ECE3411uCLab/labs/circular_buffer_uart/circular_buffers_uart/main.c:35
}

/* Drive exactly one LED (0..7). Any out-of-range value turns all off. */
static inline void leds_set_position(uint8_t pos) {
  if (pos < 8U) {
    PORTD.OUT = (uint8_t)(1U << pos);
     860:	81 e0       	ldi	r24, 0x01	; 1
     862:	80 93 64 04 	sts	0x0464, r24	; 0x800464 <__TEXT_REGION_LENGTH__+0x7e0464>
_delay_ms():
/home/artj/.mplab/app-finder/apps/avr-gcc/v7.3.0/avr8-gnu-toolchain-linux_x86_64/avr/include/util/delay.h:187
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     866:	8f e3       	ldi	r24, 0x3F	; 63
     868:	9c e9       	ldi	r25, 0x9C	; 156
     86a:	01 97       	sbiw	r24, 0x01	; 1
     86c:	f1 f7       	brne	.-4      	; 0x86a <main+0x56>
     86e:	00 c0       	rjmp	.+0      	; 0x870 <main+0x5c>
     870:	00 00       	nop
main():
/home/artj/Documents/ECE3411uCLab/labs/circular_buffer_uart/circular_buffers_uart/main.c:248
  sei(); // Enable global Interrupts
  printf("UART Interrupt-Driven LED Blinker Initialized.\n");
  printf("Setting up interrrrrnaaalll pointerrr varrraiblee\n");
  /* State */
  uint8_t freq_hz = 2U; /* starts at 2 Hz */
  uint8_t led_pos = 0U; /* starts at PD0  */
     872:	71 2c       	mov	r7, r1
/home/artj/Documents/ECE3411uCLab/labs/circular_buffer_uart/circular_buffers_uart/main.c:247

  sei(); // Enable global Interrupts
  printf("UART Interrupt-Driven LED Blinker Initialized.\n");
  printf("Setting up interrrrrnaaalll pointerrr varrraiblee\n");
  /* State */
  uint8_t freq_hz = 2U; /* starts at 2 Hz */
     874:	68 94       	set
     876:	ff 24       	eor	r15, r15
     878:	f1 f8       	bld	r15, 1
/home/artj/Documents/ECE3411uCLab/labs/circular_buffer_uart/circular_buffers_uart/main.c:256
  /* Timekeeping using 10 ms ticks */
  uint16_t tick10_ms = 0U; /* accumulates to half_ms */

  /* Initialize LED output for the current position */
  leds_set_position(led_pos);
  bool led_on_phase = true;
     87a:	ee 24       	eor	r14, r14
     87c:	e3 94       	inc	r14
/home/artj/Documents/ECE3411uCLab/labs/circular_buffer_uart/circular_buffers_uart/main.c:261

  while (1) {
    /* 10 ms base tick */
    _delay_ms(10);
    tick10_ms += 10U;
     87e:	0a e0       	ldi	r16, 0x0A	; 10
     880:	10 e0       	ldi	r17, 0x00	; 0
prompt_and_handle_menu():
/home/artj/Documents/ECE3411uCLab/labs/circular_buffer_uart/circular_buffers_uart/main.c:144
  static bool prompt_shown = false;
  char ch;

  // Show prompt only when transitioning to IDLE state and not already shown
  if (state == MENU_IDLE && !prompt_shown) {
    printf("\nDo you want to change the frequency or position? (F/P)\n> ");
     882:	0f 2e       	mov	r0, r31
     884:	fd e7       	ldi	r31, 0x7D	; 125
     886:	2f 2e       	mov	r2, r31
     888:	f0 e4       	ldi	r31, 0x40	; 64
     88a:	3f 2e       	mov	r3, r31
     88c:	f0 2d       	mov	r31, r0
leds_set_position():
/home/artj/Documents/ECE3411uCLab/labs/circular_buffer_uart/circular_buffers_uart/main.c:35
}

/* Drive exactly one LED (0..7). Any out-of-range value turns all off. */
static inline void leds_set_position(uint8_t pos) {
  if (pos < 8U) {
    PORTD.OUT = (uint8_t)(1U << pos);
     88e:	aa 24       	eor	r10, r10
     890:	a3 94       	inc	r10
     892:	b1 2c       	mov	r11, r1
     894:	0f 2e       	mov	r0, r31
     896:	f0 e6       	ldi	r31, 0x60	; 96
     898:	cf 2e       	mov	r12, r31
     89a:	f4 e0       	ldi	r31, 0x04	; 4
     89c:	df 2e       	mov	r13, r31
     89e:	f0 2d       	mov	r31, r0
half_ms_from_freq():
/home/artj/Documents/ECE3411uCLab/labs/circular_buffer_uart/circular_buffers_uart/main.c:60
  }
}

static inline uint16_t half_ms_from_freq(uint8_t freq_hz) {
  if (freq_hz == 0U) {
    return 500U;
     8a0:	0f 2e       	mov	r0, r31
     8a2:	f4 ef       	ldi	r31, 0xF4	; 244
     8a4:	5f 2e       	mov	r5, r31
     8a6:	f0 2d       	mov	r31, r0
     8a8:	66 24       	eor	r6, r6
     8aa:	63 94       	inc	r6
     8ac:	6c c1       	rjmp	.+728    	; 0xb86 <main+0x372>
prompt_and_handle_menu():
/home/artj/Documents/ECE3411uCLab/labs/circular_buffer_uart/circular_buffers_uart/main.c:144
  static bool prompt_shown = false;
  char ch;

  // Show prompt only when transitioning to IDLE state and not already shown
  if (state == MENU_IDLE && !prompt_shown) {
    printf("\nDo you want to change the frequency or position? (F/P)\n> ");
     8ae:	3f 92       	push	r3
     8b0:	2f 92       	push	r2
     8b2:	0e 94 97 09 	call	0x132e	; 0x132e <printf>
/home/artj/Documents/ECE3411uCLab/labs/circular_buffer_uart/circular_buffers_uart/main.c:146
    // fflush(stdout);
    prompt_shown = true;
     8b6:	81 e0       	ldi	r24, 0x01	; 1
     8b8:	80 93 b1 42 	sts	0x42B1, r24	; 0x8042b1 <prompt_shown.4784>
     8bc:	0f 90       	pop	r0
     8be:	0f 90       	pop	r0
     8c0:	6b c1       	rjmp	.+726    	; 0xb98 <main+0x384>
/home/artj/Documents/ECE3411uCLab/labs/circular_buffer_uart/circular_buffers_uart/main.c:155
  if (!uart_receive_char(&ch)) {
    return; // No input available, return immediately
  }

  // Echo the character
  printf("%c", ch);
     8c2:	89 81       	ldd	r24, Y+1	; 0x01
     8c4:	90 e0       	ldi	r25, 0x00	; 0
     8c6:	0e 94 ab 09 	call	0x1356	; 0x1356 <putchar>
/home/artj/Documents/ECE3411uCLab/labs/circular_buffer_uart/circular_buffers_uart/main.c:156
  switch (state) {
     8ca:	80 91 b2 42 	lds	r24, 0x42B2	; 0x8042b2 <state.4781>
     8ce:	81 30       	cpi	r24, 0x01	; 1
     8d0:	71 f1       	breq	.+92     	; 0x92e <main+0x11a>
     8d2:	d8 f0       	brcs	.+54     	; 0x90a <main+0xf6>
     8d4:	82 30       	cpi	r24, 0x02	; 2
     8d6:	09 f4       	brne	.+2      	; 0x8da <main+0xc6>
     8d8:	84 c0       	rjmp	.+264    	; 0x9e2 <main+0x1ce>
     8da:	83 30       	cpi	r24, 0x03	; 3
     8dc:	09 f0       	breq	.+2      	; 0x8e0 <main+0xcc>
     8de:	62 c1       	rjmp	.+708    	; 0xba4 <main+0x390>
/home/artj/Documents/ECE3411uCLab/labs/circular_buffer_uart/circular_buffers_uart/main.c:214
      input_buffer[input_index++] = ch;
    }
    break;

  case MENU_WAIT_POS:
    if (ch == '\n' || ch == '\r') {
     8e0:	89 81       	ldd	r24, Y+1	; 0x01
     8e2:	8a 30       	cpi	r24, 0x0A	; 10
     8e4:	09 f4       	brne	.+2      	; 0x8e8 <main+0xd4>
     8e6:	ca c0       	rjmp	.+404    	; 0xa7c <main+0x268>
     8e8:	8d 30       	cpi	r24, 0x0D	; 13
     8ea:	09 f4       	brne	.+2      	; 0x8ee <main+0xda>
     8ec:	c7 c0       	rjmp	.+398    	; 0xa7c <main+0x268>
/home/artj/Documents/ECE3411uCLab/labs/circular_buffer_uart/circular_buffers_uart/main.c:227
      *pos = np;
      leds_set_position(*pos);
      printf("OK. Position set to %u.\n", (unsigned)*pos);
      state = MENU_IDLE;
      prompt_shown = false;
    } else if (input_index < 63) {
     8ee:	e0 91 b0 42 	lds	r30, 0x42B0	; 0x8042b0 <input_index.4783>
     8f2:	ef 33       	cpi	r30, 0x3F	; 63
     8f4:	08 f0       	brcs	.+2      	; 0x8f8 <main+0xe4>
     8f6:	56 c1       	rjmp	.+684    	; 0xba4 <main+0x390>
/home/artj/Documents/ECE3411uCLab/labs/circular_buffer_uart/circular_buffers_uart/main.c:228
      input_buffer[input_index++] = ch;
     8f8:	91 e0       	ldi	r25, 0x01	; 1
     8fa:	9e 0f       	add	r25, r30
     8fc:	90 93 b0 42 	sts	0x42B0, r25	; 0x8042b0 <input_index.4783>
     900:	f0 e0       	ldi	r31, 0x00	; 0
     902:	e0 59       	subi	r30, 0x90	; 144
     904:	fd 4b       	sbci	r31, 0xBD	; 189
     906:	80 83       	st	Z, r24
     908:	4d c1       	rjmp	.+666    	; 0xba4 <main+0x390>
/home/artj/Documents/ECE3411uCLab/labs/circular_buffer_uart/circular_buffers_uart/main.c:159
  // Echo the character
  printf("%c", ch);
  switch (state) {
  case MENU_IDLE:
    // On any input, move to choice state
    state = MENU_WAIT_CHOICE;
     90a:	81 e0       	ldi	r24, 0x01	; 1
     90c:	80 93 b2 42 	sts	0x42B2, r24	; 0x8042b2 <state.4781>
/home/artj/Documents/ECE3411uCLab/labs/circular_buffer_uart/circular_buffers_uart/main.c:161
    input_index = 0;
    memset(input_buffer, 0, sizeof(input_buffer));
     910:	90 e4       	ldi	r25, 0x40	; 64
     912:	e0 e7       	ldi	r30, 0x70	; 112
     914:	f2 e4       	ldi	r31, 0x42	; 66
     916:	11 92       	st	Z+, r1
     918:	9a 95       	dec	r25
     91a:	e9 f7       	brne	.-6      	; 0x916 <main+0x102>
/home/artj/Documents/ECE3411uCLab/labs/circular_buffer_uart/circular_buffers_uart/main.c:162
    prompt_shown = false; // Reset for next time
     91c:	10 92 b1 42 	sts	0x42B1, r1	; 0x8042b1 <prompt_shown.4784>
/home/artj/Documents/ECE3411uCLab/labs/circular_buffer_uart/circular_buffers_uart/main.c:165
    // Store first char
    if (input_index < 63) {
      input_buffer[input_index++] = ch;
     920:	80 93 b0 42 	sts	0x42B0, r24	; 0x8042b0 <input_index.4783>
     924:	89 81       	ldd	r24, Y+1	; 0x01
     926:	e0 e7       	ldi	r30, 0x70	; 112
     928:	f2 e4       	ldi	r31, 0x42	; 66
     92a:	80 83       	st	Z, r24
     92c:	3b c1       	rjmp	.+630    	; 0xba4 <main+0x390>
/home/artj/Documents/ECE3411uCLab/labs/circular_buffer_uart/circular_buffers_uart/main.c:170
    }
    break;

  case MENU_WAIT_CHOICE:
    if (ch == '\n' || ch == '\r') {
     92e:	89 81       	ldd	r24, Y+1	; 0x01
     930:	8a 30       	cpi	r24, 0x0A	; 10
     932:	81 f0       	breq	.+32     	; 0x954 <main+0x140>
     934:	8d 30       	cpi	r24, 0x0D	; 13
     936:	71 f0       	breq	.+28     	; 0x954 <main+0x140>
/home/artj/Documents/ECE3411uCLab/labs/circular_buffer_uart/circular_buffers_uart/main.c:190
        printf("\nUnrecognized option '%c'. Please enter F or P next time.\n",
               choice);
        state = MENU_IDLE;
        prompt_shown = false;
      }
    } else if (input_index < 63) {
     938:	e0 91 b0 42 	lds	r30, 0x42B0	; 0x8042b0 <input_index.4783>
     93c:	ef 33       	cpi	r30, 0x3F	; 63
     93e:	08 f0       	brcs	.+2      	; 0x942 <main+0x12e>
     940:	31 c1       	rjmp	.+610    	; 0xba4 <main+0x390>
/home/artj/Documents/ECE3411uCLab/labs/circular_buffer_uart/circular_buffers_uart/main.c:191
      input_buffer[input_index++] = ch;
     942:	91 e0       	ldi	r25, 0x01	; 1
     944:	9e 0f       	add	r25, r30
     946:	90 93 b0 42 	sts	0x42B0, r25	; 0x8042b0 <input_index.4783>
     94a:	f0 e0       	ldi	r31, 0x00	; 0
     94c:	e0 59       	subi	r30, 0x90	; 144
     94e:	fd 4b       	sbci	r31, 0xBD	; 189
     950:	80 83       	st	Z, r24
     952:	28 c1       	rjmp	.+592    	; 0xba4 <main+0x390>
/home/artj/Documents/ECE3411uCLab/labs/circular_buffer_uart/circular_buffers_uart/main.c:171
    }
    break;

  case MENU_WAIT_CHOICE:
    if (ch == '\n' || ch == '\r') {
      if (input_index == 0)
     954:	80 91 b0 42 	lds	r24, 0x42B0	; 0x8042b0 <input_index.4783>
     958:	88 23       	and	r24, r24
     95a:	09 f4       	brne	.+2      	; 0x95e <main+0x14a>
     95c:	23 c1       	rjmp	.+582    	; 0xba4 <main+0x390>
/home/artj/Documents/ECE3411uCLab/labs/circular_buffer_uart/circular_buffers_uart/main.c:173
        break; // Ignore empty input
      char choice = input_buffer[0];
     95e:	e0 e7       	ldi	r30, 0x70	; 112
     960:	f2 e4       	ldi	r31, 0x42	; 66
     962:	90 81       	ld	r25, Z
/home/artj/Documents/ECE3411uCLab/labs/circular_buffer_uart/circular_buffers_uart/main.c:174
      if (choice == 'F' || choice == 'f') {
     964:	89 2f       	mov	r24, r25
     966:	8f 7d       	andi	r24, 0xDF	; 223
     968:	86 34       	cpi	r24, 0x46	; 70
     96a:	99 f0       	breq	.+38     	; 0x992 <main+0x17e>
/home/artj/Documents/ECE3411uCLab/labs/circular_buffer_uart/circular_buffers_uart/main.c:179
        printf("\nFrequency (1-10 Hz):\n> ");
        state = MENU_WAIT_FREQ;
        input_index = 0;
        memset(input_buffer, 0, sizeof(input_buffer));
      } else if (choice == 'P' || choice == 'p') {
     96c:	80 35       	cpi	r24, 0x50	; 80
     96e:	29 f1       	breq	.+74     	; 0x9ba <main+0x1a6>
/home/artj/Documents/ECE3411uCLab/labs/circular_buffer_uart/circular_buffers_uart/main.c:185
        printf("\nPosition (0-7):\n> ");
        state = MENU_WAIT_POS;
        input_index = 0;
        memset(input_buffer, 0, sizeof(input_buffer));
      } else {
        printf("\nUnrecognized option '%c'. Please enter F or P next time.\n",
     970:	1f 92       	push	r1
     972:	9f 93       	push	r25
     974:	85 ee       	ldi	r24, 0xE5	; 229
     976:	90 e4       	ldi	r25, 0x40	; 64
     978:	9f 93       	push	r25
     97a:	8f 93       	push	r24
     97c:	0e 94 97 09 	call	0x132e	; 0x132e <printf>
/home/artj/Documents/ECE3411uCLab/labs/circular_buffer_uart/circular_buffers_uart/main.c:187
               choice);
        state = MENU_IDLE;
     980:	10 92 b2 42 	sts	0x42B2, r1	; 0x8042b2 <state.4781>
/home/artj/Documents/ECE3411uCLab/labs/circular_buffer_uart/circular_buffers_uart/main.c:188
        prompt_shown = false;
     984:	10 92 b1 42 	sts	0x42B1, r1	; 0x8042b1 <prompt_shown.4784>
     988:	0f 90       	pop	r0
     98a:	0f 90       	pop	r0
     98c:	0f 90       	pop	r0
     98e:	0f 90       	pop	r0
     990:	09 c1       	rjmp	.+530    	; 0xba4 <main+0x390>
/home/artj/Documents/ECE3411uCLab/labs/circular_buffer_uart/circular_buffers_uart/main.c:175
    if (ch == '\n' || ch == '\r') {
      if (input_index == 0)
        break; // Ignore empty input
      char choice = input_buffer[0];
      if (choice == 'F' || choice == 'f') {
        printf("\nFrequency (1-10 Hz):\n> ");
     992:	88 eb       	ldi	r24, 0xB8	; 184
     994:	90 e4       	ldi	r25, 0x40	; 64
     996:	9f 93       	push	r25
     998:	8f 93       	push	r24
     99a:	0e 94 97 09 	call	0x132e	; 0x132e <printf>
/home/artj/Documents/ECE3411uCLab/labs/circular_buffer_uart/circular_buffers_uart/main.c:176
        state = MENU_WAIT_FREQ;
     99e:	82 e0       	ldi	r24, 0x02	; 2
     9a0:	80 93 b2 42 	sts	0x42B2, r24	; 0x8042b2 <state.4781>
/home/artj/Documents/ECE3411uCLab/labs/circular_buffer_uart/circular_buffers_uart/main.c:177
        input_index = 0;
     9a4:	10 92 b0 42 	sts	0x42B0, r1	; 0x8042b0 <input_index.4783>
/home/artj/Documents/ECE3411uCLab/labs/circular_buffer_uart/circular_buffers_uart/main.c:178
        memset(input_buffer, 0, sizeof(input_buffer));
     9a8:	80 e4       	ldi	r24, 0x40	; 64
     9aa:	e0 e7       	ldi	r30, 0x70	; 112
     9ac:	f2 e4       	ldi	r31, 0x42	; 66
     9ae:	11 92       	st	Z+, r1
     9b0:	8a 95       	dec	r24
     9b2:	e9 f7       	brne	.-6      	; 0x9ae <main+0x19a>
     9b4:	0f 90       	pop	r0
     9b6:	0f 90       	pop	r0
     9b8:	f5 c0       	rjmp	.+490    	; 0xba4 <main+0x390>
/home/artj/Documents/ECE3411uCLab/labs/circular_buffer_uart/circular_buffers_uart/main.c:180
      } else if (choice == 'P' || choice == 'p') {
        printf("\nPosition (0-7):\n> ");
     9ba:	81 ed       	ldi	r24, 0xD1	; 209
     9bc:	90 e4       	ldi	r25, 0x40	; 64
     9be:	9f 93       	push	r25
     9c0:	8f 93       	push	r24
     9c2:	0e 94 97 09 	call	0x132e	; 0x132e <printf>
/home/artj/Documents/ECE3411uCLab/labs/circular_buffer_uart/circular_buffers_uart/main.c:181
        state = MENU_WAIT_POS;
     9c6:	83 e0       	ldi	r24, 0x03	; 3
     9c8:	80 93 b2 42 	sts	0x42B2, r24	; 0x8042b2 <state.4781>
/home/artj/Documents/ECE3411uCLab/labs/circular_buffer_uart/circular_buffers_uart/main.c:182
        input_index = 0;
     9cc:	10 92 b0 42 	sts	0x42B0, r1	; 0x8042b0 <input_index.4783>
/home/artj/Documents/ECE3411uCLab/labs/circular_buffer_uart/circular_buffers_uart/main.c:183
        memset(input_buffer, 0, sizeof(input_buffer));
     9d0:	80 e4       	ldi	r24, 0x40	; 64
     9d2:	e0 e7       	ldi	r30, 0x70	; 112
     9d4:	f2 e4       	ldi	r31, 0x42	; 66
     9d6:	11 92       	st	Z+, r1
     9d8:	8a 95       	dec	r24
     9da:	e9 f7       	brne	.-6      	; 0x9d6 <main+0x1c2>
     9dc:	0f 90       	pop	r0
     9de:	0f 90       	pop	r0
     9e0:	e1 c0       	rjmp	.+450    	; 0xba4 <main+0x390>
/home/artj/Documents/ECE3411uCLab/labs/circular_buffer_uart/circular_buffers_uart/main.c:196
      input_buffer[input_index++] = ch;
    }
    break;

  case MENU_WAIT_FREQ:
    if (ch == '\n' || ch == '\r') {
     9e2:	89 81       	ldd	r24, Y+1	; 0x01
     9e4:	8a 30       	cpi	r24, 0x0A	; 10
     9e6:	81 f0       	breq	.+32     	; 0xa08 <main+0x1f4>
     9e8:	8d 30       	cpi	r24, 0x0D	; 13
     9ea:	71 f0       	breq	.+28     	; 0xa08 <main+0x1f4>
/home/artj/Documents/ECE3411uCLab/labs/circular_buffer_uart/circular_buffers_uart/main.c:208
      }
      *freq_hz = nf;
      printf("OK. Frequency set to %u Hz.\n", (unsigned)*freq_hz);
      state = MENU_IDLE;
      prompt_shown = false;
    } else if (input_index < 63) {
     9ec:	e0 91 b0 42 	lds	r30, 0x42B0	; 0x8042b0 <input_index.4783>
     9f0:	ef 33       	cpi	r30, 0x3F	; 63
     9f2:	08 f0       	brcs	.+2      	; 0x9f6 <main+0x1e2>
     9f4:	d7 c0       	rjmp	.+430    	; 0xba4 <main+0x390>
/home/artj/Documents/ECE3411uCLab/labs/circular_buffer_uart/circular_buffers_uart/main.c:209
      input_buffer[input_index++] = ch;
     9f6:	91 e0       	ldi	r25, 0x01	; 1
     9f8:	9e 0f       	add	r25, r30
     9fa:	90 93 b0 42 	sts	0x42B0, r25	; 0x8042b0 <input_index.4783>
     9fe:	f0 e0       	ldi	r31, 0x00	; 0
     a00:	e0 59       	subi	r30, 0x90	; 144
     a02:	fd 4b       	sbci	r31, 0xBD	; 189
     a04:	80 83       	st	Z, r24
     a06:	ce c0       	rjmp	.+412    	; 0xba4 <main+0x390>
/home/artj/Documents/ECE3411uCLab/labs/circular_buffer_uart/circular_buffers_uart/main.c:197
    }
    break;

  case MENU_WAIT_FREQ:
    if (ch == '\n' || ch == '\r') {
      if (input_index == 0)
     a08:	80 91 b0 42 	lds	r24, 0x42B0	; 0x8042b0 <input_index.4783>
     a0c:	88 23       	and	r24, r24
     a0e:	09 f4       	brne	.+2      	; 0xa12 <main+0x1fe>
     a10:	c9 c0       	rjmp	.+402    	; 0xba4 <main+0x390>
/home/artj/Documents/ECE3411uCLab/labs/circular_buffer_uart/circular_buffers_uart/main.c:199
        break;
      unsigned int newf = atoi(input_buffer);
     a12:	80 e7       	ldi	r24, 0x70	; 112
     a14:	92 e4       	ldi	r25, 0x42	; 66
     a16:	0e 94 33 09 	call	0x1266	; 0x1266 <atoi>
     a1a:	28 2f       	mov	r18, r24
     a1c:	39 2f       	mov	r19, r25
clamp_u8():
/home/artj/Documents/ECE3411uCLab/labs/circular_buffer_uart/circular_buffers_uart/main.c:50
  }
}

static inline uint8_t clamp_u8(uint8_t v, uint8_t lo, uint8_t hi) {
  if (v < lo) {
    return lo;
     a1e:	ff 24       	eor	r15, r15
     a20:	f3 94       	inc	r15
/home/artj/Documents/ECE3411uCLab/labs/circular_buffer_uart/circular_buffers_uart/main.c:49
    PORTD.OUTTGL = (uint8_t)(1U << pos);
  }
}

static inline uint8_t clamp_u8(uint8_t v, uint8_t lo, uint8_t hi) {
  if (v < lo) {
     a22:	88 23       	and	r24, r24
     a24:	41 f0       	breq	.+16     	; 0xa36 <main+0x222>
     a26:	f8 2e       	mov	r15, r24
     a28:	fa e0       	ldi	r31, 0x0A	; 10
     a2a:	f8 17       	cp	r31, r24
     a2c:	20 f4       	brcc	.+8      	; 0xa36 <main+0x222>
     a2e:	0f 2e       	mov	r0, r31
     a30:	fa e0       	ldi	r31, 0x0A	; 10
     a32:	ff 2e       	mov	r15, r31
     a34:	f0 2d       	mov	r31, r0
prompt_and_handle_menu():
/home/artj/Documents/ECE3411uCLab/labs/circular_buffer_uart/circular_buffers_uart/main.c:201
    if (ch == '\n' || ch == '\r') {
      if (input_index == 0)
        break;
      unsigned int newf = atoi(input_buffer);
      uint8_t nf = clamp_u8((uint8_t)newf, 1U, 10U);
      if (nf != newf) {
     a36:	8f 2c       	mov	r8, r15
     a38:	91 2c       	mov	r9, r1
     a3a:	28 15       	cp	r18, r8
     a3c:	39 05       	cpc	r19, r9
     a3e:	89 f4       	brne	.+34     	; 0xa62 <main+0x24e>
/home/artj/Documents/ECE3411uCLab/labs/circular_buffer_uart/circular_buffers_uart/main.c:205
        printf("\nOut of range. Clamped to %u Hz.\n", (unsigned)nf);
      }
      *freq_hz = nf;
      printf("OK. Frequency set to %u Hz.\n", (unsigned)*freq_hz);
     a40:	9f 92       	push	r9
     a42:	8f 92       	push	r8
     a44:	82 e4       	ldi	r24, 0x42	; 66
     a46:	91 e4       	ldi	r25, 0x41	; 65
     a48:	9f 93       	push	r25
     a4a:	8f 93       	push	r24
     a4c:	0e 94 97 09 	call	0x132e	; 0x132e <printf>
/home/artj/Documents/ECE3411uCLab/labs/circular_buffer_uart/circular_buffers_uart/main.c:206
      state = MENU_IDLE;
     a50:	10 92 b2 42 	sts	0x42B2, r1	; 0x8042b2 <state.4781>
/home/artj/Documents/ECE3411uCLab/labs/circular_buffer_uart/circular_buffers_uart/main.c:207
      prompt_shown = false;
     a54:	10 92 b1 42 	sts	0x42B1, r1	; 0x8042b1 <prompt_shown.4784>
     a58:	0f 90       	pop	r0
     a5a:	0f 90       	pop	r0
     a5c:	0f 90       	pop	r0
     a5e:	0f 90       	pop	r0
     a60:	a1 c0       	rjmp	.+322    	; 0xba4 <main+0x390>
/home/artj/Documents/ECE3411uCLab/labs/circular_buffer_uart/circular_buffers_uart/main.c:202
      if (input_index == 0)
        break;
      unsigned int newf = atoi(input_buffer);
      uint8_t nf = clamp_u8((uint8_t)newf, 1U, 10U);
      if (nf != newf) {
        printf("\nOut of range. Clamped to %u Hz.\n", (unsigned)nf);
     a62:	1f 92       	push	r1
     a64:	ff 92       	push	r15
     a66:	80 e2       	ldi	r24, 0x20	; 32
     a68:	91 e4       	ldi	r25, 0x41	; 65
     a6a:	9f 93       	push	r25
     a6c:	8f 93       	push	r24
     a6e:	0e 94 97 09 	call	0x132e	; 0x132e <printf>
     a72:	0f 90       	pop	r0
     a74:	0f 90       	pop	r0
     a76:	0f 90       	pop	r0
     a78:	0f 90       	pop	r0
     a7a:	e2 cf       	rjmp	.-60     	; 0xa40 <main+0x22c>
/home/artj/Documents/ECE3411uCLab/labs/circular_buffer_uart/circular_buffers_uart/main.c:215
    }
    break;

  case MENU_WAIT_POS:
    if (ch == '\n' || ch == '\r') {
      if (input_index == 0)
     a7c:	80 91 b0 42 	lds	r24, 0x42B0	; 0x8042b0 <input_index.4783>
     a80:	88 23       	and	r24, r24
     a82:	09 f4       	brne	.+2      	; 0xa86 <main+0x272>
     a84:	8f c0       	rjmp	.+286    	; 0xba4 <main+0x390>
/home/artj/Documents/ECE3411uCLab/labs/circular_buffer_uart/circular_buffers_uart/main.c:217
        break;
      unsigned int newp = atoi(input_buffer);
     a86:	80 e7       	ldi	r24, 0x70	; 112
     a88:	92 e4       	ldi	r25, 0x42	; 66
     a8a:	0e 94 33 09 	call	0x1266	; 0x1266 <atoi>
/home/artj/Documents/ECE3411uCLab/labs/circular_buffer_uart/circular_buffers_uart/main.c:218
      uint8_t np = clamp_u8((uint8_t)newp, 0U, 7U);
     a8e:	78 2e       	mov	r7, r24
     a90:	f7 e0       	ldi	r31, 0x07	; 7
     a92:	f8 17       	cp	r31, r24
     a94:	20 f4       	brcc	.+8      	; 0xa9e <main+0x28a>
     a96:	0f 2e       	mov	r0, r31
     a98:	f7 e0       	ldi	r31, 0x07	; 7
     a9a:	7f 2e       	mov	r7, r31
     a9c:	f0 2d       	mov	r31, r0
/home/artj/Documents/ECE3411uCLab/labs/circular_buffer_uart/circular_buffers_uart/main.c:219
      if (np != newp) {
     a9e:	87 2c       	mov	r8, r7
     aa0:	91 2c       	mov	r9, r1
     aa2:	88 15       	cp	r24, r8
     aa4:	99 05       	cpc	r25, r9
     aa6:	d1 f4       	brne	.+52     	; 0xadc <main+0x2c8>
leds_set_position():
/home/artj/Documents/ECE3411uCLab/labs/circular_buffer_uart/circular_buffers_uart/main.c:35
}

/* Drive exactly one LED (0..7). Any out-of-range value turns all off. */
static inline void leds_set_position(uint8_t pos) {
  if (pos < 8U) {
    PORTD.OUT = (uint8_t)(1U << pos);
     aa8:	c5 01       	movw	r24, r10
     aaa:	07 2c       	mov	r0, r7
     aac:	02 c0       	rjmp	.+4      	; 0xab2 <main+0x29e>
     aae:	88 0f       	add	r24, r24
     ab0:	99 1f       	adc	r25, r25
     ab2:	0a 94       	dec	r0
     ab4:	e2 f7       	brpl	.-8      	; 0xaae <main+0x29a>
     ab6:	f6 01       	movw	r30, r12
     ab8:	84 83       	std	Z+4, r24	; 0x04
prompt_and_handle_menu():
/home/artj/Documents/ECE3411uCLab/labs/circular_buffer_uart/circular_buffers_uart/main.c:224
      if (np != newp) {
        printf("\nOut of range. Clamped to %u.\n", (unsigned)np);
      }
      *pos = np;
      leds_set_position(*pos);
      printf("OK. Position set to %u.\n", (unsigned)*pos);
     aba:	9f 92       	push	r9
     abc:	8f 92       	push	r8
     abe:	8e e7       	ldi	r24, 0x7E	; 126
     ac0:	91 e4       	ldi	r25, 0x41	; 65
     ac2:	9f 93       	push	r25
     ac4:	8f 93       	push	r24
     ac6:	0e 94 97 09 	call	0x132e	; 0x132e <printf>
/home/artj/Documents/ECE3411uCLab/labs/circular_buffer_uart/circular_buffers_uart/main.c:225
      state = MENU_IDLE;
     aca:	10 92 b2 42 	sts	0x42B2, r1	; 0x8042b2 <state.4781>
/home/artj/Documents/ECE3411uCLab/labs/circular_buffer_uart/circular_buffers_uart/main.c:226
      prompt_shown = false;
     ace:	10 92 b1 42 	sts	0x42B1, r1	; 0x8042b1 <prompt_shown.4784>
     ad2:	0f 90       	pop	r0
     ad4:	0f 90       	pop	r0
     ad6:	0f 90       	pop	r0
     ad8:	0f 90       	pop	r0
     ada:	64 c0       	rjmp	.+200    	; 0xba4 <main+0x390>
/home/artj/Documents/ECE3411uCLab/labs/circular_buffer_uart/circular_buffers_uart/main.c:220
      if (input_index == 0)
        break;
      unsigned int newp = atoi(input_buffer);
      uint8_t np = clamp_u8((uint8_t)newp, 0U, 7U);
      if (np != newp) {
        printf("\nOut of range. Clamped to %u.\n", (unsigned)np);
     adc:	1f 92       	push	r1
     ade:	7f 92       	push	r7
     ae0:	8f e5       	ldi	r24, 0x5F	; 95
     ae2:	91 e4       	ldi	r25, 0x41	; 65
     ae4:	9f 93       	push	r25
     ae6:	8f 93       	push	r24
     ae8:	0e 94 97 09 	call	0x132e	; 0x132e <printf>
     aec:	0f 90       	pop	r0
     aee:	0f 90       	pop	r0
     af0:	0f 90       	pop	r0
     af2:	0f 90       	pop	r0
     af4:	d9 cf       	rjmp	.-78     	; 0xaa8 <main+0x294>
half_ms_from_freq():
/home/artj/Documents/ECE3411uCLab/labs/circular_buffer_uart/circular_buffers_uart/main.c:64
  if (freq_hz == 0U) {
    return 500U;
  }
  uint16_t half = (uint16_t)((500U + (freq_hz / 2U)) / freq_hz); /* rounded */
  if (half == 0U) {
    half = 1U;
     af6:	b5 01       	movw	r22, r10
main():
/home/artj/Documents/ECE3411uCLab/labs/circular_buffer_uart/circular_buffers_uart/main.c:277

    /* If frequency changed, recompute timing */
    half_ms = half_ms_from_freq(freq_hz);

    /* Make sure only the selected LED is driven after interaction */
    if (led_on_phase) {
     af8:	ee 20       	and	r14, r14
     afa:	39 f1       	breq	.+78     	; 0xb4a <main+0x336>
leds_set_position():
/home/artj/Documents/ECE3411uCLab/labs/circular_buffer_uart/circular_buffers_uart/main.c:34
  PORTC.OUTCLR = PIN6_bm | PIN7_bm; // all off
}

/* Drive exactly one LED (0..7). Any out-of-range value turns all off. */
static inline void leds_set_position(uint8_t pos) {
  if (pos < 8U) {
     afc:	27 e0       	ldi	r18, 0x07	; 7
     afe:	27 15       	cp	r18, r7
     b00:	a8 f0       	brcs	.+42     	; 0xb2c <main+0x318>
/home/artj/Documents/ECE3411uCLab/labs/circular_buffer_uart/circular_buffers_uart/main.c:35
    PORTD.OUT = (uint8_t)(1U << pos);
     b02:	c5 01       	movw	r24, r10
     b04:	07 2c       	mov	r0, r7
     b06:	02 c0       	rjmp	.+4      	; 0xb0c <main+0x2f8>
     b08:	88 0f       	add	r24, r24
     b0a:	99 1f       	adc	r25, r25
     b0c:	0a 94       	dec	r0
     b0e:	e2 f7       	brpl	.-8      	; 0xb08 <main+0x2f4>
     b10:	f6 01       	movw	r30, r12
     b12:	84 83       	std	Z+4, r24	; 0x04
_delay_ms():
/home/artj/.mplab/app-finder/apps/avr-gcc/v7.3.0/avr8-gnu-toolchain-linux_x86_64/avr/include/util/delay.h:187
     b14:	8f e3       	ldi	r24, 0x3F	; 63
     b16:	9c e9       	ldi	r25, 0x9C	; 156
     b18:	01 97       	sbiw	r24, 0x01	; 1
     b1a:	f1 f7       	brne	.-4      	; 0xb18 <main+0x304>
     b1c:	00 c0       	rjmp	.+0      	; 0xb1e <main+0x30a>
     b1e:	00 00       	nop
main():
/home/artj/Documents/ECE3411uCLab/labs/circular_buffer_uart/circular_buffers_uart/main.c:261
  bool led_on_phase = true;

  while (1) {
    /* 10 ms base tick */
    _delay_ms(10);
    tick10_ms += 10U;
     b20:	06 5f       	subi	r16, 0xF6	; 246
     b22:	1f 4f       	sbci	r17, 0xFF	; 255
/home/artj/Documents/ECE3411uCLab/labs/circular_buffer_uart/circular_buffers_uart/main.c:264

    /* Toggle at half-period boundary */
    if (tick10_ms >= half_ms) {
     b24:	06 17       	cp	r16, r22
     b26:	17 07       	cpc	r17, r23
     b28:	08 f5       	brcc	.+66     	; 0xb6c <main+0x358>
     b2a:	2d c0       	rjmp	.+90     	; 0xb86 <main+0x372>
leds_set_position():
/home/artj/Documents/ECE3411uCLab/labs/circular_buffer_uart/circular_buffers_uart/main.c:37
/* Drive exactly one LED (0..7). Any out-of-range value turns all off. */
static inline void leds_set_position(uint8_t pos) {
  if (pos < 8U) {
    PORTD.OUT = (uint8_t)(1U << pos);
  } else {
    PORTD.OUTCLR = 0xFF;
     b2c:	8f ef       	ldi	r24, 0xFF	; 255
     b2e:	f6 01       	movw	r30, r12
     b30:	86 83       	std	Z+6, r24	; 0x06
_delay_ms():
/home/artj/.mplab/app-finder/apps/avr-gcc/v7.3.0/avr8-gnu-toolchain-linux_x86_64/avr/include/util/delay.h:187
     b32:	8f e3       	ldi	r24, 0x3F	; 63
     b34:	9c e9       	ldi	r25, 0x9C	; 156
     b36:	01 97       	sbiw	r24, 0x01	; 1
     b38:	f1 f7       	brne	.-4      	; 0xb36 <main+0x322>
     b3a:	00 c0       	rjmp	.+0      	; 0xb3c <main+0x328>
     b3c:	00 00       	nop
main():
/home/artj/Documents/ECE3411uCLab/labs/circular_buffer_uart/circular_buffers_uart/main.c:261
  bool led_on_phase = true;

  while (1) {
    /* 10 ms base tick */
    _delay_ms(10);
    tick10_ms += 10U;
     b3e:	06 5f       	subi	r16, 0xF6	; 246
     b40:	1f 4f       	sbci	r17, 0xFF	; 255
/home/artj/Documents/ECE3411uCLab/labs/circular_buffer_uart/circular_buffers_uart/main.c:264

    /* Toggle at half-period boundary */
    if (tick10_ms >= half_ms) {
     b42:	06 17       	cp	r16, r22
     b44:	17 07       	cpc	r17, r23
     b46:	d8 f4       	brcc	.+54     	; 0xb7e <main+0x36a>
     b48:	1e c0       	rjmp	.+60     	; 0xb86 <main+0x372>
/home/artj/Documents/ECE3411uCLab/labs/circular_buffer_uart/circular_buffers_uart/main.c:280

    /* Make sure only the selected LED is driven after interaction */
    if (led_on_phase) {
      leds_set_position(led_pos);
    } else {
      PORTD.OUTCLR = 0xFF;
     b4a:	8f ef       	ldi	r24, 0xFF	; 255
     b4c:	f6 01       	movw	r30, r12
     b4e:	86 83       	std	Z+6, r24	; 0x06
_delay_ms():
/home/artj/.mplab/app-finder/apps/avr-gcc/v7.3.0/avr8-gnu-toolchain-linux_x86_64/avr/include/util/delay.h:187
     b50:	8f e3       	ldi	r24, 0x3F	; 63
     b52:	9c e9       	ldi	r25, 0x9C	; 156
     b54:	01 97       	sbiw	r24, 0x01	; 1
     b56:	f1 f7       	brne	.-4      	; 0xb54 <main+0x340>
     b58:	00 c0       	rjmp	.+0      	; 0xb5a <main+0x346>
     b5a:	00 00       	nop
main():
/home/artj/Documents/ECE3411uCLab/labs/circular_buffer_uart/circular_buffers_uart/main.c:261
  bool led_on_phase = true;

  while (1) {
    /* 10 ms base tick */
    _delay_ms(10);
    tick10_ms += 10U;
     b5c:	06 5f       	subi	r16, 0xF6	; 246
     b5e:	1f 4f       	sbci	r17, 0xFF	; 255
/home/artj/Documents/ECE3411uCLab/labs/circular_buffer_uart/circular_buffers_uart/main.c:264

    /* Toggle at half-period boundary */
    if (tick10_ms >= half_ms) {
     b60:	06 17       	cp	r16, r22
     b62:	17 07       	cpc	r17, r23
     b64:	80 f0       	brcs	.+32     	; 0xb86 <main+0x372>
leds_toggle_position():
/home/artj/Documents/ECE3411uCLab/labs/circular_buffer_uart/circular_buffers_uart/main.c:43
  }
}

/* Toggle the currently selected LED without affecting others. */
static inline void leds_toggle_position(uint8_t pos) {
  if (pos < 8U) {
     b66:	97 e0       	ldi	r25, 0x07	; 7
     b68:	97 15       	cp	r25, r7
     b6a:	48 f0       	brcs	.+18     	; 0xb7e <main+0x36a>
/home/artj/Documents/ECE3411uCLab/labs/circular_buffer_uart/circular_buffers_uart/main.c:44
    PORTD.OUTTGL = (uint8_t)(1U << pos);
     b6c:	c5 01       	movw	r24, r10
     b6e:	07 2c       	mov	r0, r7
     b70:	02 c0       	rjmp	.+4      	; 0xb76 <main+0x362>
     b72:	88 0f       	add	r24, r24
     b74:	99 1f       	adc	r25, r25
     b76:	0a 94       	dec	r0
     b78:	e2 f7       	brpl	.-8      	; 0xb72 <main+0x35e>
     b7a:	f6 01       	movw	r30, r12
     b7c:	87 83       	std	Z+7, r24	; 0x07
main():
/home/artj/Documents/ECE3411uCLab/labs/circular_buffer_uart/circular_buffers_uart/main.c:266
    tick10_ms += 10U;

    /* Toggle at half-period boundary */
    if (tick10_ms >= half_ms) {
      leds_toggle_position(led_pos);
      led_on_phase = !led_on_phase;
     b7e:	81 e0       	ldi	r24, 0x01	; 1
     b80:	e8 26       	eor	r14, r24
/home/artj/Documents/ECE3411uCLab/labs/circular_buffer_uart/circular_buffers_uart/main.c:267
      tick10_ms = 0U;
     b82:	10 e0       	ldi	r17, 0x00	; 0
     b84:	00 e0       	ldi	r16, 0x00	; 0
prompt_and_handle_menu():
/home/artj/Documents/ECE3411uCLab/labs/circular_buffer_uart/circular_buffers_uart/main.c:143
  static uint8_t input_index = 0;
  static bool prompt_shown = false;
  char ch;

  // Show prompt only when transitioning to IDLE state and not already shown
  if (state == MENU_IDLE && !prompt_shown) {
     b86:	80 91 b2 42 	lds	r24, 0x42B2	; 0x8042b2 <state.4781>
     b8a:	81 11       	cpse	r24, r1
     b8c:	05 c0       	rjmp	.+10     	; 0xb98 <main+0x384>
     b8e:	80 91 b1 42 	lds	r24, 0x42B1	; 0x8042b1 <prompt_shown.4784>
     b92:	88 23       	and	r24, r24
     b94:	09 f4       	brne	.+2      	; 0xb98 <main+0x384>
     b96:	8b ce       	rjmp	.-746    	; 0x8ae <main+0x9a>
/home/artj/Documents/ECE3411uCLab/labs/circular_buffer_uart/circular_buffers_uart/main.c:150
    // fflush(stdout);
    prompt_shown = true;
  }

  // Try to read one char using unified API (non-blocking)
  if (!uart_receive_char(&ch)) {
     b98:	ce 01       	movw	r24, r28
     b9a:	01 96       	adiw	r24, 0x01	; 1
     b9c:	0e 94 84 01 	call	0x308	; 0x308 <uart_receive_char>
     ba0:	81 11       	cpse	r24, r1
     ba2:	8f ce       	rjmp	.-738    	; 0x8c2 <main+0xae>
half_ms_from_freq():
/home/artj/Documents/ECE3411uCLab/labs/circular_buffer_uart/circular_buffers_uart/main.c:60
  }
}

static inline uint16_t half_ms_from_freq(uint8_t freq_hz) {
  if (freq_hz == 0U) {
    return 500U;
     ba4:	65 2d       	mov	r22, r5
     ba6:	76 2d       	mov	r23, r6
/home/artj/Documents/ECE3411uCLab/labs/circular_buffer_uart/circular_buffers_uart/main.c:59
    return v;
  }
}

static inline uint16_t half_ms_from_freq(uint8_t freq_hz) {
  if (freq_hz == 0U) {
     ba8:	ff 20       	and	r15, r15
     baa:	09 f4       	brne	.+2      	; 0xbae <main+0x39a>
     bac:	a5 cf       	rjmp	.-182    	; 0xaf8 <main+0x2e4>
/home/artj/Documents/ECE3411uCLab/labs/circular_buffer_uart/circular_buffers_uart/main.c:62
    return 500U;
  }
  uint16_t half = (uint16_t)((500U + (freq_hz / 2U)) / freq_hz); /* rounded */
     bae:	8f 2d       	mov	r24, r15
     bb0:	86 95       	lsr	r24
     bb2:	90 e0       	ldi	r25, 0x00	; 0
     bb4:	8c 50       	subi	r24, 0x0C	; 12
     bb6:	9e 4f       	sbci	r25, 0xFE	; 254
     bb8:	6f 2d       	mov	r22, r15
     bba:	70 e0       	ldi	r23, 0x00	; 0
     bbc:	0e 94 ec 05 	call	0xbd8	; 0xbd8 <__udivmodhi4>
/home/artj/Documents/ECE3411uCLab/labs/circular_buffer_uart/circular_buffers_uart/main.c:63
  if (half == 0U) {
     bc0:	61 15       	cp	r22, r1
     bc2:	71 05       	cpc	r23, r1
     bc4:	09 f4       	brne	.+2      	; 0xbc8 <main+0x3b4>
     bc6:	97 cf       	rjmp	.-210    	; 0xaf6 <main+0x2e2>
     bc8:	65 3f       	cpi	r22, 0xF5	; 245
     bca:	f1 e0       	ldi	r31, 0x01	; 1
     bcc:	7f 07       	cpc	r23, r31
     bce:	08 f4       	brcc	.+2      	; 0xbd2 <main+0x3be>
     bd0:	93 cf       	rjmp	.-218    	; 0xaf8 <main+0x2e4>
     bd2:	65 2d       	mov	r22, r5
     bd4:	76 2d       	mov	r23, r6
     bd6:	90 cf       	rjmp	.-224    	; 0xaf8 <main+0x2e4>

00000bd8 <__udivmodhi4>:
__udivmodhi4():
     bd8:	aa 1b       	sub	r26, r26
     bda:	bb 1b       	sub	r27, r27
     bdc:	51 e1       	ldi	r21, 0x11	; 17
     bde:	07 c0       	rjmp	.+14     	; 0xbee <__udivmodhi4_ep>

00000be0 <__udivmodhi4_loop>:
     be0:	aa 1f       	adc	r26, r26
     be2:	bb 1f       	adc	r27, r27
     be4:	a6 17       	cp	r26, r22
     be6:	b7 07       	cpc	r27, r23
     be8:	10 f0       	brcs	.+4      	; 0xbee <__udivmodhi4_ep>
     bea:	a6 1b       	sub	r26, r22
     bec:	b7 0b       	sbc	r27, r23

00000bee <__udivmodhi4_ep>:
     bee:	88 1f       	adc	r24, r24
     bf0:	99 1f       	adc	r25, r25
     bf2:	5a 95       	dec	r21
     bf4:	a9 f7       	brne	.-22     	; 0xbe0 <__udivmodhi4_loop>
     bf6:	80 95       	com	r24
     bf8:	90 95       	com	r25
     bfa:	bc 01       	movw	r22, r24
     bfc:	cd 01       	movw	r24, r26
     bfe:	08 95       	ret

00000c00 <__subsf3>:
__subsf3():
     c00:	50 58       	subi	r21, 0x80	; 128

00000c02 <__addsf3>:
     c02:	bb 27       	eor	r27, r27
     c04:	aa 27       	eor	r26, r26
     c06:	0e 94 18 06 	call	0xc30	; 0xc30 <__addsf3x>
     c0a:	0c 94 62 07 	jmp	0xec4	; 0xec4 <__fp_round>
__addsf3():
     c0e:	0e 94 54 07 	call	0xea8	; 0xea8 <__fp_pscA>
     c12:	38 f0       	brcs	.+14     	; 0xc22 <__addsf3+0x20>
     c14:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <__fp_pscB>
     c18:	20 f0       	brcs	.+8      	; 0xc22 <__addsf3+0x20>
     c1a:	39 f4       	brne	.+14     	; 0xc2a <__addsf3+0x28>
     c1c:	9f 3f       	cpi	r25, 0xFF	; 255
     c1e:	19 f4       	brne	.+6      	; 0xc26 <__addsf3+0x24>
     c20:	26 f4       	brtc	.+8      	; 0xc2a <__addsf3+0x28>
     c22:	0c 94 51 07 	jmp	0xea2	; 0xea2 <__fp_nan>
     c26:	0e f4       	brtc	.+2      	; 0xc2a <__addsf3+0x28>
     c28:	e0 95       	com	r30
     c2a:	e7 fb       	bst	r30, 7
     c2c:	0c 94 4b 07 	jmp	0xe96	; 0xe96 <__fp_inf>

00000c30 <__addsf3x>:
__addsf3x():
     c30:	e9 2f       	mov	r30, r25
     c32:	0e 94 73 07 	call	0xee6	; 0xee6 <__fp_split3>
     c36:	58 f3       	brcs	.-42     	; 0xc0e <__addsf3+0xc>
     c38:	ba 17       	cp	r27, r26
     c3a:	62 07       	cpc	r22, r18
     c3c:	73 07       	cpc	r23, r19
     c3e:	84 07       	cpc	r24, r20
     c40:	95 07       	cpc	r25, r21
     c42:	20 f0       	brcs	.+8      	; 0xc4c <__addsf3x+0x1c>
     c44:	79 f4       	brne	.+30     	; 0xc64 <__addsf3x+0x34>
     c46:	a6 f5       	brtc	.+104    	; 0xcb0 <__addsf3x+0x80>
     c48:	0c 94 95 07 	jmp	0xf2a	; 0xf2a <__fp_zero>
     c4c:	0e f4       	brtc	.+2      	; 0xc50 <__addsf3x+0x20>
     c4e:	e0 95       	com	r30
     c50:	0b 2e       	mov	r0, r27
     c52:	ba 2f       	mov	r27, r26
     c54:	a0 2d       	mov	r26, r0
     c56:	0b 01       	movw	r0, r22
     c58:	b9 01       	movw	r22, r18
     c5a:	90 01       	movw	r18, r0
     c5c:	0c 01       	movw	r0, r24
     c5e:	ca 01       	movw	r24, r20
     c60:	a0 01       	movw	r20, r0
     c62:	11 24       	eor	r1, r1
     c64:	ff 27       	eor	r31, r31
     c66:	59 1b       	sub	r21, r25
     c68:	99 f0       	breq	.+38     	; 0xc90 <__addsf3x+0x60>
     c6a:	59 3f       	cpi	r21, 0xF9	; 249
     c6c:	50 f4       	brcc	.+20     	; 0xc82 <__addsf3x+0x52>
     c6e:	50 3e       	cpi	r21, 0xE0	; 224
     c70:	68 f1       	brcs	.+90     	; 0xccc <__addsf3x+0x9c>
     c72:	1a 16       	cp	r1, r26
     c74:	f0 40       	sbci	r31, 0x00	; 0
     c76:	a2 2f       	mov	r26, r18
     c78:	23 2f       	mov	r18, r19
     c7a:	34 2f       	mov	r19, r20
     c7c:	44 27       	eor	r20, r20
     c7e:	58 5f       	subi	r21, 0xF8	; 248
     c80:	f3 cf       	rjmp	.-26     	; 0xc68 <__addsf3x+0x38>
     c82:	46 95       	lsr	r20
     c84:	37 95       	ror	r19
     c86:	27 95       	ror	r18
     c88:	a7 95       	ror	r26
     c8a:	f0 40       	sbci	r31, 0x00	; 0
     c8c:	53 95       	inc	r21
     c8e:	c9 f7       	brne	.-14     	; 0xc82 <__addsf3x+0x52>
     c90:	7e f4       	brtc	.+30     	; 0xcb0 <__addsf3x+0x80>
     c92:	1f 16       	cp	r1, r31
     c94:	ba 0b       	sbc	r27, r26
     c96:	62 0b       	sbc	r22, r18
     c98:	73 0b       	sbc	r23, r19
     c9a:	84 0b       	sbc	r24, r20
     c9c:	ba f0       	brmi	.+46     	; 0xccc <__addsf3x+0x9c>
     c9e:	91 50       	subi	r25, 0x01	; 1
     ca0:	a1 f0       	breq	.+40     	; 0xcca <__addsf3x+0x9a>
     ca2:	ff 0f       	add	r31, r31
     ca4:	bb 1f       	adc	r27, r27
     ca6:	66 1f       	adc	r22, r22
     ca8:	77 1f       	adc	r23, r23
     caa:	88 1f       	adc	r24, r24
     cac:	c2 f7       	brpl	.-16     	; 0xc9e <__addsf3x+0x6e>
     cae:	0e c0       	rjmp	.+28     	; 0xccc <__addsf3x+0x9c>
     cb0:	ba 0f       	add	r27, r26
     cb2:	62 1f       	adc	r22, r18
     cb4:	73 1f       	adc	r23, r19
     cb6:	84 1f       	adc	r24, r20
     cb8:	48 f4       	brcc	.+18     	; 0xccc <__addsf3x+0x9c>
     cba:	87 95       	ror	r24
     cbc:	77 95       	ror	r23
     cbe:	67 95       	ror	r22
     cc0:	b7 95       	ror	r27
     cc2:	f7 95       	ror	r31
     cc4:	9e 3f       	cpi	r25, 0xFE	; 254
     cc6:	08 f0       	brcs	.+2      	; 0xcca <__addsf3x+0x9a>
     cc8:	b0 cf       	rjmp	.-160    	; 0xc2a <__addsf3+0x28>
     cca:	93 95       	inc	r25
     ccc:	88 0f       	add	r24, r24
     cce:	08 f0       	brcs	.+2      	; 0xcd2 <__addsf3x+0xa2>
     cd0:	99 27       	eor	r25, r25
     cd2:	ee 0f       	add	r30, r30
     cd4:	97 95       	ror	r25
     cd6:	87 95       	ror	r24
     cd8:	08 95       	ret

00000cda <__divsf3>:
     cda:	0e 94 81 06 	call	0xd02	; 0xd02 <__divsf3x>
     cde:	0c 94 62 07 	jmp	0xec4	; 0xec4 <__fp_round>
     ce2:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <__fp_pscB>
     ce6:	58 f0       	brcs	.+22     	; 0xcfe <__divsf3+0x24>
     ce8:	0e 94 54 07 	call	0xea8	; 0xea8 <__fp_pscA>
     cec:	40 f0       	brcs	.+16     	; 0xcfe <__divsf3+0x24>
     cee:	29 f4       	brne	.+10     	; 0xcfa <__divsf3+0x20>
     cf0:	5f 3f       	cpi	r21, 0xFF	; 255
     cf2:	29 f0       	breq	.+10     	; 0xcfe <__divsf3+0x24>
     cf4:	0c 94 4b 07 	jmp	0xe96	; 0xe96 <__fp_inf>
     cf8:	51 11       	cpse	r21, r1
     cfa:	0c 94 96 07 	jmp	0xf2c	; 0xf2c <__fp_szero>
__divsf3():
     cfe:	0c 94 51 07 	jmp	0xea2	; 0xea2 <__fp_nan>

00000d02 <__divsf3x>:
__divsf3x():
     d02:	0e 94 73 07 	call	0xee6	; 0xee6 <__fp_split3>
     d06:	68 f3       	brcs	.-38     	; 0xce2 <__divsf3+0x8>

00000d08 <__divsf3_pse>:
     d08:	99 23       	and	r25, r25
     d0a:	b1 f3       	breq	.-20     	; 0xcf8 <__divsf3+0x1e>
     d0c:	55 23       	and	r21, r21
     d0e:	91 f3       	breq	.-28     	; 0xcf4 <__divsf3+0x1a>
     d10:	95 1b       	sub	r25, r21
     d12:	55 0b       	sbc	r21, r21
     d14:	bb 27       	eor	r27, r27
     d16:	aa 27       	eor	r26, r26
     d18:	62 17       	cp	r22, r18
     d1a:	73 07       	cpc	r23, r19
     d1c:	84 07       	cpc	r24, r20
     d1e:	38 f0       	brcs	.+14     	; 0xd2e <__divsf3_pse+0x26>
     d20:	9f 5f       	subi	r25, 0xFF	; 255
     d22:	5f 4f       	sbci	r21, 0xFF	; 255
     d24:	22 0f       	add	r18, r18
     d26:	33 1f       	adc	r19, r19
     d28:	44 1f       	adc	r20, r20
     d2a:	aa 1f       	adc	r26, r26
     d2c:	a9 f3       	breq	.-22     	; 0xd18 <__divsf3_pse+0x10>
     d2e:	35 d0       	rcall	.+106    	; 0xd9a <__divsf3_pse+0x92>
     d30:	0e 2e       	mov	r0, r30
     d32:	3a f0       	brmi	.+14     	; 0xd42 <__divsf3_pse+0x3a>
     d34:	e0 e8       	ldi	r30, 0x80	; 128
     d36:	32 d0       	rcall	.+100    	; 0xd9c <__divsf3_pse+0x94>
     d38:	91 50       	subi	r25, 0x01	; 1
     d3a:	50 40       	sbci	r21, 0x00	; 0
     d3c:	e6 95       	lsr	r30
     d3e:	00 1c       	adc	r0, r0
     d40:	ca f7       	brpl	.-14     	; 0xd34 <__divsf3_pse+0x2c>
     d42:	2b d0       	rcall	.+86     	; 0xd9a <__divsf3_pse+0x92>
     d44:	fe 2f       	mov	r31, r30
     d46:	29 d0       	rcall	.+82     	; 0xd9a <__divsf3_pse+0x92>
     d48:	66 0f       	add	r22, r22
     d4a:	77 1f       	adc	r23, r23
     d4c:	88 1f       	adc	r24, r24
     d4e:	bb 1f       	adc	r27, r27
     d50:	26 17       	cp	r18, r22
     d52:	37 07       	cpc	r19, r23
     d54:	48 07       	cpc	r20, r24
     d56:	ab 07       	cpc	r26, r27
     d58:	b0 e8       	ldi	r27, 0x80	; 128
     d5a:	09 f0       	breq	.+2      	; 0xd5e <__divsf3_pse+0x56>
     d5c:	bb 0b       	sbc	r27, r27
     d5e:	80 2d       	mov	r24, r0
     d60:	bf 01       	movw	r22, r30
     d62:	ff 27       	eor	r31, r31
     d64:	93 58       	subi	r25, 0x83	; 131
     d66:	5f 4f       	sbci	r21, 0xFF	; 255
     d68:	3a f0       	brmi	.+14     	; 0xd78 <__divsf3_pse+0x70>
     d6a:	9e 3f       	cpi	r25, 0xFE	; 254
     d6c:	51 05       	cpc	r21, r1
     d6e:	78 f0       	brcs	.+30     	; 0xd8e <__divsf3_pse+0x86>
     d70:	0c 94 4b 07 	jmp	0xe96	; 0xe96 <__fp_inf>
     d74:	0c 94 96 07 	jmp	0xf2c	; 0xf2c <__fp_szero>
     d78:	5f 3f       	cpi	r21, 0xFF	; 255
     d7a:	e4 f3       	brlt	.-8      	; 0xd74 <__divsf3_pse+0x6c>
     d7c:	98 3e       	cpi	r25, 0xE8	; 232
     d7e:	d4 f3       	brlt	.-12     	; 0xd74 <__divsf3_pse+0x6c>
     d80:	86 95       	lsr	r24
     d82:	77 95       	ror	r23
     d84:	67 95       	ror	r22
     d86:	b7 95       	ror	r27
     d88:	f7 95       	ror	r31
     d8a:	9f 5f       	subi	r25, 0xFF	; 255
     d8c:	c9 f7       	brne	.-14     	; 0xd80 <__divsf3_pse+0x78>
     d8e:	88 0f       	add	r24, r24
     d90:	91 1d       	adc	r25, r1
     d92:	96 95       	lsr	r25
     d94:	87 95       	ror	r24
     d96:	97 f9       	bld	r25, 7
     d98:	08 95       	ret
     d9a:	e1 e0       	ldi	r30, 0x01	; 1
     d9c:	66 0f       	add	r22, r22
     d9e:	77 1f       	adc	r23, r23
     da0:	88 1f       	adc	r24, r24
     da2:	bb 1f       	adc	r27, r27
     da4:	62 17       	cp	r22, r18
     da6:	73 07       	cpc	r23, r19
     da8:	84 07       	cpc	r24, r20
     daa:	ba 07       	cpc	r27, r26
     dac:	20 f0       	brcs	.+8      	; 0xdb6 <__divsf3_pse+0xae>
     dae:	62 1b       	sub	r22, r18
     db0:	73 0b       	sbc	r23, r19
     db2:	84 0b       	sbc	r24, r20
     db4:	ba 0b       	sbc	r27, r26
     db6:	ee 1f       	adc	r30, r30
     db8:	88 f7       	brcc	.-30     	; 0xd9c <__divsf3_pse+0x94>
     dba:	e0 95       	com	r30
     dbc:	08 95       	ret

00000dbe <__fixunssfsi>:
     dbe:	0e 94 7b 07 	call	0xef6	; 0xef6 <__fp_splitA>
     dc2:	88 f0       	brcs	.+34     	; 0xde6 <__fixunssfsi+0x28>
     dc4:	9f 57       	subi	r25, 0x7F	; 127
     dc6:	98 f0       	brcs	.+38     	; 0xdee <__fixunssfsi+0x30>
     dc8:	b9 2f       	mov	r27, r25
     dca:	99 27       	eor	r25, r25
     dcc:	b7 51       	subi	r27, 0x17	; 23
     dce:	b0 f0       	brcs	.+44     	; 0xdfc <__fixunssfsi+0x3e>
     dd0:	e1 f0       	breq	.+56     	; 0xe0a <__fixunssfsi+0x4c>
     dd2:	66 0f       	add	r22, r22
     dd4:	77 1f       	adc	r23, r23
     dd6:	88 1f       	adc	r24, r24
     dd8:	99 1f       	adc	r25, r25
     dda:	1a f0       	brmi	.+6      	; 0xde2 <__fixunssfsi+0x24>
     ddc:	ba 95       	dec	r27
__fixunssfsi():
     dde:	c9 f7       	brne	.-14     	; 0xdd2 <__fixunssfsi+0x14>
     de0:	14 c0       	rjmp	.+40     	; 0xe0a <__fixunssfsi+0x4c>
     de2:	b1 30       	cpi	r27, 0x01	; 1
     de4:	91 f0       	breq	.+36     	; 0xe0a <__fixunssfsi+0x4c>
     de6:	0e 94 95 07 	call	0xf2a	; 0xf2a <__fp_zero>
     dea:	b1 e0       	ldi	r27, 0x01	; 1
     dec:	08 95       	ret
     dee:	0c 94 95 07 	jmp	0xf2a	; 0xf2a <__fp_zero>
     df2:	67 2f       	mov	r22, r23
     df4:	78 2f       	mov	r23, r24
     df6:	88 27       	eor	r24, r24
     df8:	b8 5f       	subi	r27, 0xF8	; 248
     dfa:	39 f0       	breq	.+14     	; 0xe0a <__fixunssfsi+0x4c>
     dfc:	b9 3f       	cpi	r27, 0xF9	; 249
     dfe:	cc f3       	brlt	.-14     	; 0xdf2 <__fixunssfsi+0x34>
     e00:	86 95       	lsr	r24
     e02:	77 95       	ror	r23
     e04:	67 95       	ror	r22
     e06:	b3 95       	inc	r27
     e08:	d9 f7       	brne	.-10     	; 0xe00 <__fixunssfsi+0x42>
     e0a:	3e f4       	brtc	.+14     	; 0xe1a <__fixunssfsi+0x5c>
     e0c:	90 95       	com	r25
     e0e:	80 95       	com	r24
     e10:	70 95       	com	r23
     e12:	61 95       	neg	r22
     e14:	7f 4f       	sbci	r23, 0xFF	; 255
     e16:	8f 4f       	sbci	r24, 0xFF	; 255
     e18:	9f 4f       	sbci	r25, 0xFF	; 255
     e1a:	08 95       	ret

00000e1c <__floatunsisf>:
__floatunsisf():
     e1c:	e8 94       	clt
     e1e:	09 c0       	rjmp	.+18     	; 0xe32 <__floatsisf+0x12>

00000e20 <__floatsisf>:
     e20:	97 fb       	bst	r25, 7
     e22:	3e f4       	brtc	.+14     	; 0xe32 <__floatsisf+0x12>
     e24:	90 95       	com	r25
     e26:	80 95       	com	r24
     e28:	70 95       	com	r23
     e2a:	61 95       	neg	r22
     e2c:	7f 4f       	sbci	r23, 0xFF	; 255
     e2e:	8f 4f       	sbci	r24, 0xFF	; 255
     e30:	9f 4f       	sbci	r25, 0xFF	; 255
     e32:	99 23       	and	r25, r25
     e34:	a9 f0       	breq	.+42     	; 0xe60 <__floatsisf+0x40>
     e36:	f9 2f       	mov	r31, r25
     e38:	96 e9       	ldi	r25, 0x96	; 150
     e3a:	bb 27       	eor	r27, r27
     e3c:	93 95       	inc	r25
     e3e:	f6 95       	lsr	r31
     e40:	87 95       	ror	r24
     e42:	77 95       	ror	r23
     e44:	67 95       	ror	r22
     e46:	b7 95       	ror	r27
     e48:	f1 11       	cpse	r31, r1
     e4a:	f8 cf       	rjmp	.-16     	; 0xe3c <__floatsisf+0x1c>
     e4c:	fa f4       	brpl	.+62     	; 0xe8c <__floatsisf+0x6c>
     e4e:	bb 0f       	add	r27, r27
     e50:	11 f4       	brne	.+4      	; 0xe56 <__floatsisf+0x36>
     e52:	60 ff       	sbrs	r22, 0
     e54:	1b c0       	rjmp	.+54     	; 0xe8c <__floatsisf+0x6c>
     e56:	6f 5f       	subi	r22, 0xFF	; 255
     e58:	7f 4f       	sbci	r23, 0xFF	; 255
     e5a:	8f 4f       	sbci	r24, 0xFF	; 255
     e5c:	9f 4f       	sbci	r25, 0xFF	; 255
     e5e:	16 c0       	rjmp	.+44     	; 0xe8c <__floatsisf+0x6c>
     e60:	88 23       	and	r24, r24
     e62:	11 f0       	breq	.+4      	; 0xe68 <__floatsisf+0x48>
     e64:	96 e9       	ldi	r25, 0x96	; 150
     e66:	11 c0       	rjmp	.+34     	; 0xe8a <__floatsisf+0x6a>
     e68:	77 23       	and	r23, r23
     e6a:	21 f0       	breq	.+8      	; 0xe74 <__floatsisf+0x54>
     e6c:	9e e8       	ldi	r25, 0x8E	; 142
     e6e:	87 2f       	mov	r24, r23
     e70:	76 2f       	mov	r23, r22
     e72:	05 c0       	rjmp	.+10     	; 0xe7e <__floatsisf+0x5e>
     e74:	66 23       	and	r22, r22
     e76:	71 f0       	breq	.+28     	; 0xe94 <__floatsisf+0x74>
     e78:	96 e8       	ldi	r25, 0x86	; 134
     e7a:	86 2f       	mov	r24, r22
     e7c:	70 e0       	ldi	r23, 0x00	; 0
     e7e:	60 e0       	ldi	r22, 0x00	; 0
     e80:	2a f0       	brmi	.+10     	; 0xe8c <__floatsisf+0x6c>
     e82:	9a 95       	dec	r25
     e84:	66 0f       	add	r22, r22
     e86:	77 1f       	adc	r23, r23
     e88:	88 1f       	adc	r24, r24
     e8a:	da f7       	brpl	.-10     	; 0xe82 <__floatsisf+0x62>
     e8c:	88 0f       	add	r24, r24
     e8e:	96 95       	lsr	r25
     e90:	87 95       	ror	r24
     e92:	97 f9       	bld	r25, 7
     e94:	08 95       	ret

00000e96 <__fp_inf>:
__fp_inf():
     e96:	97 f9       	bld	r25, 7
     e98:	9f 67       	ori	r25, 0x7F	; 127
     e9a:	80 e8       	ldi	r24, 0x80	; 128
     e9c:	70 e0       	ldi	r23, 0x00	; 0
     e9e:	60 e0       	ldi	r22, 0x00	; 0
     ea0:	08 95       	ret

00000ea2 <__fp_nan>:
__fp_nan():
     ea2:	9f ef       	ldi	r25, 0xFF	; 255
     ea4:	80 ec       	ldi	r24, 0xC0	; 192
     ea6:	08 95       	ret

00000ea8 <__fp_pscA>:
__fp_pscA():
     ea8:	00 24       	eor	r0, r0
     eaa:	0a 94       	dec	r0
     eac:	16 16       	cp	r1, r22
     eae:	17 06       	cpc	r1, r23
     eb0:	18 06       	cpc	r1, r24
     eb2:	09 06       	cpc	r0, r25
     eb4:	08 95       	ret

00000eb6 <__fp_pscB>:
__fp_pscB():
     eb6:	00 24       	eor	r0, r0
     eb8:	0a 94       	dec	r0
     eba:	12 16       	cp	r1, r18
     ebc:	13 06       	cpc	r1, r19
     ebe:	14 06       	cpc	r1, r20
     ec0:	05 06       	cpc	r0, r21
     ec2:	08 95       	ret

00000ec4 <__fp_round>:
__fp_round():
     ec4:	09 2e       	mov	r0, r25
     ec6:	03 94       	inc	r0
     ec8:	00 0c       	add	r0, r0
     eca:	11 f4       	brne	.+4      	; 0xed0 <__fp_round+0xc>
     ecc:	88 23       	and	r24, r24
     ece:	52 f0       	brmi	.+20     	; 0xee4 <__fp_round+0x20>
     ed0:	bb 0f       	add	r27, r27
     ed2:	40 f4       	brcc	.+16     	; 0xee4 <__fp_round+0x20>
     ed4:	bf 2b       	or	r27, r31
     ed6:	11 f4       	brne	.+4      	; 0xedc <__fp_round+0x18>
     ed8:	60 ff       	sbrs	r22, 0
     eda:	04 c0       	rjmp	.+8      	; 0xee4 <__fp_round+0x20>
     edc:	6f 5f       	subi	r22, 0xFF	; 255
     ede:	7f 4f       	sbci	r23, 0xFF	; 255
     ee0:	8f 4f       	sbci	r24, 0xFF	; 255
     ee2:	9f 4f       	sbci	r25, 0xFF	; 255
     ee4:	08 95       	ret

00000ee6 <__fp_split3>:
__fp_split3():
     ee6:	57 fd       	sbrc	r21, 7
     ee8:	90 58       	subi	r25, 0x80	; 128
     eea:	44 0f       	add	r20, r20
     eec:	55 1f       	adc	r21, r21
     eee:	59 f0       	breq	.+22     	; 0xf06 <__fp_splitA+0x10>
     ef0:	5f 3f       	cpi	r21, 0xFF	; 255
     ef2:	71 f0       	breq	.+28     	; 0xf10 <__fp_splitA+0x1a>
     ef4:	47 95       	ror	r20

00000ef6 <__fp_splitA>:
     ef6:	88 0f       	add	r24, r24
     ef8:	97 fb       	bst	r25, 7
     efa:	99 1f       	adc	r25, r25
     efc:	61 f0       	breq	.+24     	; 0xf16 <__fp_splitA+0x20>
     efe:	9f 3f       	cpi	r25, 0xFF	; 255
     f00:	79 f0       	breq	.+30     	; 0xf20 <__fp_splitA+0x2a>
     f02:	87 95       	ror	r24
     f04:	08 95       	ret
     f06:	12 16       	cp	r1, r18
     f08:	13 06       	cpc	r1, r19
     f0a:	14 06       	cpc	r1, r20
     f0c:	55 1f       	adc	r21, r21
     f0e:	f2 cf       	rjmp	.-28     	; 0xef4 <__fp_split3+0xe>
     f10:	46 95       	lsr	r20
     f12:	f1 df       	rcall	.-30     	; 0xef6 <__fp_splitA>
     f14:	08 c0       	rjmp	.+16     	; 0xf26 <__fp_splitA+0x30>
     f16:	16 16       	cp	r1, r22
     f18:	17 06       	cpc	r1, r23
     f1a:	18 06       	cpc	r1, r24
     f1c:	99 1f       	adc	r25, r25
     f1e:	f1 cf       	rjmp	.-30     	; 0xf02 <__fp_splitA+0xc>
     f20:	86 95       	lsr	r24
     f22:	71 05       	cpc	r23, r1
     f24:	61 05       	cpc	r22, r1
     f26:	08 94       	sec
     f28:	08 95       	ret

00000f2a <__fp_zero>:
__fp_zero():
     f2a:	e8 94       	clt

00000f2c <__fp_szero>:
     f2c:	bb 27       	eor	r27, r27
     f2e:	66 27       	eor	r22, r22
     f30:	77 27       	eor	r23, r23
     f32:	cb 01       	movw	r24, r22
     f34:	97 f9       	bld	r25, 7
     f36:	08 95       	ret

00000f38 <__mulsf3>:
__mulsf3():
     f38:	0e 94 af 07 	call	0xf5e	; 0xf5e <__mulsf3x>
     f3c:	0c 94 62 07 	jmp	0xec4	; 0xec4 <__fp_round>
     f40:	0e 94 54 07 	call	0xea8	; 0xea8 <__fp_pscA>
     f44:	38 f0       	brcs	.+14     	; 0xf54 <__mulsf3+0x1c>
     f46:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <__fp_pscB>
     f4a:	20 f0       	brcs	.+8      	; 0xf54 <__mulsf3+0x1c>
     f4c:	95 23       	and	r25, r21
     f4e:	11 f0       	breq	.+4      	; 0xf54 <__mulsf3+0x1c>
     f50:	0c 94 4b 07 	jmp	0xe96	; 0xe96 <__fp_inf>
     f54:	0c 94 51 07 	jmp	0xea2	; 0xea2 <__fp_nan>
     f58:	11 24       	eor	r1, r1
     f5a:	0c 94 96 07 	jmp	0xf2c	; 0xf2c <__fp_szero>

00000f5e <__mulsf3x>:
__mulsf3x():
     f5e:	0e 94 73 07 	call	0xee6	; 0xee6 <__fp_split3>
     f62:	70 f3       	brcs	.-36     	; 0xf40 <__mulsf3+0x8>

00000f64 <__mulsf3_pse>:
     f64:	95 9f       	mul	r25, r21
     f66:	c1 f3       	breq	.-16     	; 0xf58 <__mulsf3+0x20>
     f68:	95 0f       	add	r25, r21
     f6a:	50 e0       	ldi	r21, 0x00	; 0
     f6c:	55 1f       	adc	r21, r21
     f6e:	62 9f       	mul	r22, r18
     f70:	f0 01       	movw	r30, r0
     f72:	72 9f       	mul	r23, r18
     f74:	bb 27       	eor	r27, r27
     f76:	f0 0d       	add	r31, r0
     f78:	b1 1d       	adc	r27, r1
     f7a:	63 9f       	mul	r22, r19
     f7c:	aa 27       	eor	r26, r26
     f7e:	f0 0d       	add	r31, r0
     f80:	b1 1d       	adc	r27, r1
     f82:	aa 1f       	adc	r26, r26
     f84:	64 9f       	mul	r22, r20
     f86:	66 27       	eor	r22, r22
     f88:	b0 0d       	add	r27, r0
     f8a:	a1 1d       	adc	r26, r1
     f8c:	66 1f       	adc	r22, r22
     f8e:	82 9f       	mul	r24, r18
     f90:	22 27       	eor	r18, r18
     f92:	b0 0d       	add	r27, r0
     f94:	a1 1d       	adc	r26, r1
     f96:	62 1f       	adc	r22, r18
     f98:	73 9f       	mul	r23, r19
     f9a:	b0 0d       	add	r27, r0
     f9c:	a1 1d       	adc	r26, r1
     f9e:	62 1f       	adc	r22, r18
     fa0:	83 9f       	mul	r24, r19
     fa2:	a0 0d       	add	r26, r0
     fa4:	61 1d       	adc	r22, r1
     fa6:	22 1f       	adc	r18, r18
     fa8:	74 9f       	mul	r23, r20
     faa:	33 27       	eor	r19, r19
     fac:	a0 0d       	add	r26, r0
     fae:	61 1d       	adc	r22, r1
     fb0:	23 1f       	adc	r18, r19
     fb2:	84 9f       	mul	r24, r20
     fb4:	60 0d       	add	r22, r0
     fb6:	21 1d       	adc	r18, r1
     fb8:	82 2f       	mov	r24, r18
     fba:	76 2f       	mov	r23, r22
     fbc:	6a 2f       	mov	r22, r26
     fbe:	11 24       	eor	r1, r1
     fc0:	9f 57       	subi	r25, 0x7F	; 127
     fc2:	50 40       	sbci	r21, 0x00	; 0
     fc4:	9a f0       	brmi	.+38     	; 0xfec <__mulsf3_pse+0x88>
     fc6:	f1 f0       	breq	.+60     	; 0x1004 <__mulsf3_pse+0xa0>
     fc8:	88 23       	and	r24, r24
     fca:	4a f0       	brmi	.+18     	; 0xfde <__mulsf3_pse+0x7a>
     fcc:	ee 0f       	add	r30, r30
     fce:	ff 1f       	adc	r31, r31
     fd0:	bb 1f       	adc	r27, r27
     fd2:	66 1f       	adc	r22, r22
     fd4:	77 1f       	adc	r23, r23
     fd6:	88 1f       	adc	r24, r24
     fd8:	91 50       	subi	r25, 0x01	; 1
     fda:	50 40       	sbci	r21, 0x00	; 0
     fdc:	a9 f7       	brne	.-22     	; 0xfc8 <__mulsf3_pse+0x64>
     fde:	9e 3f       	cpi	r25, 0xFE	; 254
     fe0:	51 05       	cpc	r21, r1
     fe2:	80 f0       	brcs	.+32     	; 0x1004 <__mulsf3_pse+0xa0>
     fe4:	0c 94 4b 07 	jmp	0xe96	; 0xe96 <__fp_inf>
     fe8:	0c 94 96 07 	jmp	0xf2c	; 0xf2c <__fp_szero>
     fec:	5f 3f       	cpi	r21, 0xFF	; 255
     fee:	e4 f3       	brlt	.-8      	; 0xfe8 <__mulsf3_pse+0x84>
     ff0:	98 3e       	cpi	r25, 0xE8	; 232
     ff2:	d4 f3       	brlt	.-12     	; 0xfe8 <__mulsf3_pse+0x84>
     ff4:	86 95       	lsr	r24
     ff6:	77 95       	ror	r23
     ff8:	67 95       	ror	r22
     ffa:	b7 95       	ror	r27
     ffc:	f7 95       	ror	r31
     ffe:	e7 95       	ror	r30
    1000:	9f 5f       	subi	r25, 0xFF	; 255
    1002:	c1 f7       	brne	.-16     	; 0xff4 <__mulsf3_pse+0x90>
    1004:	fe 2b       	or	r31, r30
    1006:	88 0f       	add	r24, r24
    1008:	91 1d       	adc	r25, r1
    100a:	96 95       	lsr	r25
    100c:	87 95       	ror	r24
    100e:	97 f9       	bld	r25, 7
    1010:	08 95       	ret

00001012 <malloc>:
    1012:	0f 93       	push	r16
    1014:	1f 93       	push	r17
    1016:	cf 93       	push	r28
    1018:	df 93       	push	r29
    101a:	82 30       	cpi	r24, 0x02	; 2
    101c:	91 05       	cpc	r25, r1
    101e:	10 f4       	brcc	.+4      	; 0x1024 <malloc+0x12>
    1020:	82 e0       	ldi	r24, 0x02	; 2
    1022:	90 e0       	ldi	r25, 0x00	; 0
    1024:	e0 91 b5 42 	lds	r30, 0x42B5	; 0x8042b5 <__flp>
    1028:	f0 91 b6 42 	lds	r31, 0x42B6	; 0x8042b6 <__flp+0x1>
    102c:	30 e0       	ldi	r19, 0x00	; 0
    102e:	20 e0       	ldi	r18, 0x00	; 0
malloc():
    1030:	b0 e0       	ldi	r27, 0x00	; 0
    1032:	a0 e0       	ldi	r26, 0x00	; 0
    1034:	30 97       	sbiw	r30, 0x00	; 0
    1036:	99 f4       	brne	.+38     	; 0x105e <malloc+0x4c>
    1038:	21 15       	cp	r18, r1
    103a:	31 05       	cpc	r19, r1
    103c:	09 f4       	brne	.+2      	; 0x1040 <malloc+0x2e>
    103e:	4a c0       	rjmp	.+148    	; 0x10d4 <malloc+0xc2>
    1040:	28 1b       	sub	r18, r24
    1042:	39 0b       	sbc	r19, r25
    1044:	24 30       	cpi	r18, 0x04	; 4
    1046:	31 05       	cpc	r19, r1
    1048:	d8 f5       	brcc	.+118    	; 0x10c0 <malloc+0xae>
    104a:	8a 81       	ldd	r24, Y+2	; 0x02
    104c:	9b 81       	ldd	r25, Y+3	; 0x03
    104e:	61 15       	cp	r22, r1
    1050:	71 05       	cpc	r23, r1
    1052:	89 f1       	breq	.+98     	; 0x10b6 <malloc+0xa4>
    1054:	fb 01       	movw	r30, r22
    1056:	82 83       	std	Z+2, r24	; 0x02
    1058:	93 83       	std	Z+3, r25	; 0x03
    105a:	fe 01       	movw	r30, r28
    105c:	11 c0       	rjmp	.+34     	; 0x1080 <malloc+0x6e>
    105e:	40 81       	ld	r20, Z
    1060:	51 81       	ldd	r21, Z+1	; 0x01
    1062:	02 81       	ldd	r16, Z+2	; 0x02
    1064:	13 81       	ldd	r17, Z+3	; 0x03
    1066:	48 17       	cp	r20, r24
    1068:	59 07       	cpc	r21, r25
    106a:	e0 f0       	brcs	.+56     	; 0x10a4 <malloc+0x92>
    106c:	48 17       	cp	r20, r24
    106e:	59 07       	cpc	r21, r25
    1070:	99 f4       	brne	.+38     	; 0x1098 <malloc+0x86>
    1072:	10 97       	sbiw	r26, 0x00	; 0
    1074:	61 f0       	breq	.+24     	; 0x108e <malloc+0x7c>
    1076:	12 96       	adiw	r26, 0x02	; 2
    1078:	0c 93       	st	X, r16
    107a:	12 97       	sbiw	r26, 0x02	; 2
    107c:	13 96       	adiw	r26, 0x03	; 3
    107e:	1c 93       	st	X, r17
    1080:	32 96       	adiw	r30, 0x02	; 2
    1082:	cf 01       	movw	r24, r30
    1084:	df 91       	pop	r29
    1086:	cf 91       	pop	r28
    1088:	1f 91       	pop	r17
    108a:	0f 91       	pop	r16
    108c:	08 95       	ret
    108e:	00 93 b5 42 	sts	0x42B5, r16	; 0x8042b5 <__flp>
    1092:	10 93 b6 42 	sts	0x42B6, r17	; 0x8042b6 <__flp+0x1>
    1096:	f4 cf       	rjmp	.-24     	; 0x1080 <malloc+0x6e>
    1098:	21 15       	cp	r18, r1
    109a:	31 05       	cpc	r19, r1
    109c:	51 f0       	breq	.+20     	; 0x10b2 <malloc+0xa0>
    109e:	42 17       	cp	r20, r18
    10a0:	53 07       	cpc	r21, r19
    10a2:	38 f0       	brcs	.+14     	; 0x10b2 <malloc+0xa0>
    10a4:	a9 01       	movw	r20, r18
    10a6:	db 01       	movw	r26, r22
    10a8:	9a 01       	movw	r18, r20
    10aa:	bd 01       	movw	r22, r26
    10ac:	df 01       	movw	r26, r30
    10ae:	f8 01       	movw	r30, r16
    10b0:	c1 cf       	rjmp	.-126    	; 0x1034 <malloc+0x22>
    10b2:	ef 01       	movw	r28, r30
    10b4:	f9 cf       	rjmp	.-14     	; 0x10a8 <malloc+0x96>
    10b6:	80 93 b5 42 	sts	0x42B5, r24	; 0x8042b5 <__flp>
    10ba:	90 93 b6 42 	sts	0x42B6, r25	; 0x8042b6 <__flp+0x1>
    10be:	cd cf       	rjmp	.-102    	; 0x105a <malloc+0x48>
    10c0:	fe 01       	movw	r30, r28
    10c2:	e2 0f       	add	r30, r18
    10c4:	f3 1f       	adc	r31, r19
    10c6:	81 93       	st	Z+, r24
    10c8:	91 93       	st	Z+, r25
    10ca:	22 50       	subi	r18, 0x02	; 2
    10cc:	31 09       	sbc	r19, r1
    10ce:	28 83       	st	Y, r18
    10d0:	39 83       	std	Y+1, r19	; 0x01
    10d2:	d7 cf       	rjmp	.-82     	; 0x1082 <malloc+0x70>
    10d4:	20 91 b3 42 	lds	r18, 0x42B3	; 0x8042b3 <__brkval>
    10d8:	30 91 b4 42 	lds	r19, 0x42B4	; 0x8042b4 <__brkval+0x1>
    10dc:	23 2b       	or	r18, r19
    10de:	41 f4       	brne	.+16     	; 0x10f0 <malloc+0xde>
    10e0:	20 91 02 40 	lds	r18, 0x4002	; 0x804002 <__malloc_heap_start>
    10e4:	30 91 03 40 	lds	r19, 0x4003	; 0x804003 <__malloc_heap_start+0x1>
    10e8:	20 93 b3 42 	sts	0x42B3, r18	; 0x8042b3 <__brkval>
    10ec:	30 93 b4 42 	sts	0x42B4, r19	; 0x8042b4 <__brkval+0x1>
    10f0:	20 91 00 40 	lds	r18, 0x4000	; 0x804000 <__DATA_REGION_ORIGIN__>
    10f4:	30 91 01 40 	lds	r19, 0x4001	; 0x804001 <__DATA_REGION_ORIGIN__+0x1>
    10f8:	21 15       	cp	r18, r1
    10fa:	31 05       	cpc	r19, r1
    10fc:	41 f4       	brne	.+16     	; 0x110e <malloc+0xfc>
    10fe:	2d b7       	in	r18, 0x3d	; 61
    1100:	3e b7       	in	r19, 0x3e	; 62
    1102:	40 91 04 40 	lds	r20, 0x4004	; 0x804004 <__malloc_margin>
    1106:	50 91 05 40 	lds	r21, 0x4005	; 0x804005 <__malloc_margin+0x1>
    110a:	24 1b       	sub	r18, r20
    110c:	35 0b       	sbc	r19, r21
    110e:	e0 91 b3 42 	lds	r30, 0x42B3	; 0x8042b3 <__brkval>
    1112:	f0 91 b4 42 	lds	r31, 0x42B4	; 0x8042b4 <__brkval+0x1>
    1116:	e2 17       	cp	r30, r18
    1118:	f3 07       	cpc	r31, r19
    111a:	a0 f4       	brcc	.+40     	; 0x1144 <malloc+0x132>
    111c:	2e 1b       	sub	r18, r30
    111e:	3f 0b       	sbc	r19, r31
    1120:	28 17       	cp	r18, r24
    1122:	39 07       	cpc	r19, r25
    1124:	78 f0       	brcs	.+30     	; 0x1144 <malloc+0x132>
    1126:	ac 01       	movw	r20, r24
    1128:	4e 5f       	subi	r20, 0xFE	; 254
    112a:	5f 4f       	sbci	r21, 0xFF	; 255
    112c:	24 17       	cp	r18, r20
    112e:	35 07       	cpc	r19, r21
    1130:	48 f0       	brcs	.+18     	; 0x1144 <malloc+0x132>
    1132:	4e 0f       	add	r20, r30
    1134:	5f 1f       	adc	r21, r31
    1136:	40 93 b3 42 	sts	0x42B3, r20	; 0x8042b3 <__brkval>
    113a:	50 93 b4 42 	sts	0x42B4, r21	; 0x8042b4 <__brkval+0x1>
    113e:	81 93       	st	Z+, r24
    1140:	91 93       	st	Z+, r25
    1142:	9f cf       	rjmp	.-194    	; 0x1082 <malloc+0x70>
    1144:	f0 e0       	ldi	r31, 0x00	; 0
    1146:	e0 e0       	ldi	r30, 0x00	; 0
    1148:	9c cf       	rjmp	.-200    	; 0x1082 <malloc+0x70>

0000114a <free>:
free():
    114a:	cf 93       	push	r28
    114c:	df 93       	push	r29
    114e:	00 97       	sbiw	r24, 0x00	; 0
    1150:	e9 f0       	breq	.+58     	; 0x118c <free+0x42>
    1152:	fc 01       	movw	r30, r24
    1154:	32 97       	sbiw	r30, 0x02	; 2
    1156:	12 82       	std	Z+2, r1	; 0x02
    1158:	13 82       	std	Z+3, r1	; 0x03
    115a:	a0 91 b5 42 	lds	r26, 0x42B5	; 0x8042b5 <__flp>
    115e:	b0 91 b6 42 	lds	r27, 0x42B6	; 0x8042b6 <__flp+0x1>
    1162:	ed 01       	movw	r28, r26
    1164:	30 e0       	ldi	r19, 0x00	; 0
    1166:	20 e0       	ldi	r18, 0x00	; 0
    1168:	10 97       	sbiw	r26, 0x00	; 0
    116a:	a1 f4       	brne	.+40     	; 0x1194 <free+0x4a>
    116c:	20 81       	ld	r18, Z
    116e:	31 81       	ldd	r19, Z+1	; 0x01
    1170:	82 0f       	add	r24, r18
    1172:	93 1f       	adc	r25, r19
    1174:	20 91 b3 42 	lds	r18, 0x42B3	; 0x8042b3 <__brkval>
    1178:	30 91 b4 42 	lds	r19, 0x42B4	; 0x8042b4 <__brkval+0x1>
    117c:	28 17       	cp	r18, r24
    117e:	39 07       	cpc	r19, r25
    1180:	09 f0       	breq	.+2      	; 0x1184 <free+0x3a>
    1182:	61 c0       	rjmp	.+194    	; 0x1246 <free+0xfc>
    1184:	e0 93 b3 42 	sts	0x42B3, r30	; 0x8042b3 <__brkval>
    1188:	f0 93 b4 42 	sts	0x42B4, r31	; 0x8042b4 <__brkval+0x1>
    118c:	df 91       	pop	r29
    118e:	cf 91       	pop	r28
    1190:	08 95       	ret
    1192:	ea 01       	movw	r28, r20
    1194:	ce 17       	cp	r28, r30
    1196:	df 07       	cpc	r29, r31
    1198:	e8 f5       	brcc	.+122    	; 0x1214 <free+0xca>
    119a:	4a 81       	ldd	r20, Y+2	; 0x02
    119c:	5b 81       	ldd	r21, Y+3	; 0x03
    119e:	9e 01       	movw	r18, r28
    11a0:	41 15       	cp	r20, r1
    11a2:	51 05       	cpc	r21, r1
    11a4:	b1 f7       	brne	.-20     	; 0x1192 <free+0x48>
    11a6:	e9 01       	movw	r28, r18
    11a8:	ea 83       	std	Y+2, r30	; 0x02
    11aa:	fb 83       	std	Y+3, r31	; 0x03
    11ac:	49 91       	ld	r20, Y+
    11ae:	59 91       	ld	r21, Y+
    11b0:	c4 0f       	add	r28, r20
    11b2:	d5 1f       	adc	r29, r21
    11b4:	ec 17       	cp	r30, r28
    11b6:	fd 07       	cpc	r31, r29
    11b8:	61 f4       	brne	.+24     	; 0x11d2 <free+0x88>
    11ba:	80 81       	ld	r24, Z
    11bc:	91 81       	ldd	r25, Z+1	; 0x01
    11be:	02 96       	adiw	r24, 0x02	; 2
    11c0:	84 0f       	add	r24, r20
    11c2:	95 1f       	adc	r25, r21
    11c4:	e9 01       	movw	r28, r18
    11c6:	88 83       	st	Y, r24
    11c8:	99 83       	std	Y+1, r25	; 0x01
    11ca:	82 81       	ldd	r24, Z+2	; 0x02
    11cc:	93 81       	ldd	r25, Z+3	; 0x03
    11ce:	8a 83       	std	Y+2, r24	; 0x02
    11d0:	9b 83       	std	Y+3, r25	; 0x03
    11d2:	f0 e0       	ldi	r31, 0x00	; 0
    11d4:	e0 e0       	ldi	r30, 0x00	; 0
    11d6:	12 96       	adiw	r26, 0x02	; 2
    11d8:	8d 91       	ld	r24, X+
    11da:	9c 91       	ld	r25, X
    11dc:	13 97       	sbiw	r26, 0x03	; 3
    11de:	00 97       	sbiw	r24, 0x00	; 0
    11e0:	b9 f5       	brne	.+110    	; 0x1250 <free+0x106>
    11e2:	2d 91       	ld	r18, X+
    11e4:	3c 91       	ld	r19, X
    11e6:	11 97       	sbiw	r26, 0x01	; 1
    11e8:	cd 01       	movw	r24, r26
    11ea:	02 96       	adiw	r24, 0x02	; 2
    11ec:	82 0f       	add	r24, r18
    11ee:	93 1f       	adc	r25, r19
    11f0:	20 91 b3 42 	lds	r18, 0x42B3	; 0x8042b3 <__brkval>
    11f4:	30 91 b4 42 	lds	r19, 0x42B4	; 0x8042b4 <__brkval+0x1>
    11f8:	28 17       	cp	r18, r24
    11fa:	39 07       	cpc	r19, r25
    11fc:	39 f6       	brne	.-114    	; 0x118c <free+0x42>
    11fe:	30 97       	sbiw	r30, 0x00	; 0
    1200:	51 f5       	brne	.+84     	; 0x1256 <free+0x10c>
    1202:	10 92 b5 42 	sts	0x42B5, r1	; 0x8042b5 <__flp>
    1206:	10 92 b6 42 	sts	0x42B6, r1	; 0x8042b6 <__flp+0x1>
    120a:	a0 93 b3 42 	sts	0x42B3, r26	; 0x8042b3 <__brkval>
    120e:	b0 93 b4 42 	sts	0x42B4, r27	; 0x8042b4 <__brkval+0x1>
    1212:	bc cf       	rjmp	.-136    	; 0x118c <free+0x42>
    1214:	c2 83       	std	Z+2, r28	; 0x02
    1216:	d3 83       	std	Z+3, r29	; 0x03
    1218:	40 81       	ld	r20, Z
    121a:	51 81       	ldd	r21, Z+1	; 0x01
    121c:	84 0f       	add	r24, r20
    121e:	95 1f       	adc	r25, r21
    1220:	c8 17       	cp	r28, r24
    1222:	d9 07       	cpc	r29, r25
    1224:	61 f4       	brne	.+24     	; 0x123e <free+0xf4>
    1226:	4e 5f       	subi	r20, 0xFE	; 254
    1228:	5f 4f       	sbci	r21, 0xFF	; 255
    122a:	88 81       	ld	r24, Y
    122c:	99 81       	ldd	r25, Y+1	; 0x01
    122e:	48 0f       	add	r20, r24
    1230:	59 1f       	adc	r21, r25
    1232:	40 83       	st	Z, r20
    1234:	51 83       	std	Z+1, r21	; 0x01
    1236:	8a 81       	ldd	r24, Y+2	; 0x02
    1238:	9b 81       	ldd	r25, Y+3	; 0x03
    123a:	82 83       	std	Z+2, r24	; 0x02
    123c:	93 83       	std	Z+3, r25	; 0x03
    123e:	21 15       	cp	r18, r1
    1240:	31 05       	cpc	r19, r1
    1242:	09 f0       	breq	.+2      	; 0x1246 <free+0xfc>
    1244:	b0 cf       	rjmp	.-160    	; 0x11a6 <free+0x5c>
    1246:	e0 93 b5 42 	sts	0x42B5, r30	; 0x8042b5 <__flp>
    124a:	f0 93 b6 42 	sts	0x42B6, r31	; 0x8042b6 <__flp+0x1>
    124e:	9e cf       	rjmp	.-196    	; 0x118c <free+0x42>
    1250:	fd 01       	movw	r30, r26
    1252:	dc 01       	movw	r26, r24
    1254:	c0 cf       	rjmp	.-128    	; 0x11d6 <free+0x8c>
    1256:	12 82       	std	Z+2, r1	; 0x02
    1258:	13 82       	std	Z+3, r1	; 0x03
    125a:	d7 cf       	rjmp	.-82     	; 0x120a <free+0xc0>

0000125c <abort>:
abort():
    125c:	81 e0       	ldi	r24, 0x01	; 1
    125e:	90 e0       	ldi	r25, 0x00	; 0
    1260:	f8 94       	cli
    1262:	0c 94 7d 0c 	jmp	0x18fa	; 0x18fa <_exit>

00001266 <atoi>:
atoi():
    1266:	fc 01       	movw	r30, r24
    1268:	88 27       	eor	r24, r24
    126a:	99 27       	eor	r25, r25
    126c:	e8 94       	clt
    126e:	21 91       	ld	r18, Z+
    1270:	20 32       	cpi	r18, 0x20	; 32
    1272:	e9 f3       	breq	.-6      	; 0x126e <atoi+0x8>
    1274:	29 30       	cpi	r18, 0x09	; 9
    1276:	10 f0       	brcs	.+4      	; 0x127c <atoi+0x16>
    1278:	2e 30       	cpi	r18, 0x0E	; 14
    127a:	c8 f3       	brcs	.-14     	; 0x126e <atoi+0x8>
    127c:	2b 32       	cpi	r18, 0x2B	; 43
    127e:	41 f0       	breq	.+16     	; 0x1290 <atoi+0x2a>
    1280:	2d 32       	cpi	r18, 0x2D	; 45
    1282:	39 f4       	brne	.+14     	; 0x1292 <atoi+0x2c>
    1284:	68 94       	set
    1286:	04 c0       	rjmp	.+8      	; 0x1290 <atoi+0x2a>
    1288:	0e 94 51 09 	call	0x12a2	; 0x12a2 <__mulhi_const_10>
    128c:	82 0f       	add	r24, r18
    128e:	91 1d       	adc	r25, r1
    1290:	21 91       	ld	r18, Z+
    1292:	20 53       	subi	r18, 0x30	; 48
    1294:	2a 30       	cpi	r18, 0x0A	; 10
    1296:	c0 f3       	brcs	.-16     	; 0x1288 <atoi+0x22>
    1298:	1e f4       	brtc	.+6      	; 0x12a0 <atoi+0x3a>
    129a:	90 95       	com	r25
    129c:	81 95       	neg	r24
    129e:	9f 4f       	sbci	r25, 0xFF	; 255
    12a0:	08 95       	ret

000012a2 <__mulhi_const_10>:
__mulhi_const_10():
    12a2:	7a e0       	ldi	r23, 0x0A	; 10
    12a4:	97 9f       	mul	r25, r23
    12a6:	90 2d       	mov	r25, r0
    12a8:	87 9f       	mul	r24, r23
    12aa:	80 2d       	mov	r24, r0
    12ac:	91 0d       	add	r25, r1
    12ae:	11 24       	eor	r1, r1
    12b0:	08 95       	ret

000012b2 <fwrite>:
fwrite():
    12b2:	8f 92       	push	r8
    12b4:	9f 92       	push	r9
    12b6:	af 92       	push	r10
    12b8:	bf 92       	push	r11
    12ba:	cf 92       	push	r12
    12bc:	df 92       	push	r13
    12be:	ef 92       	push	r14
    12c0:	ff 92       	push	r15
    12c2:	0f 93       	push	r16
    12c4:	1f 93       	push	r17
    12c6:	cf 93       	push	r28
    12c8:	df 93       	push	r29
    12ca:	5b 01       	movw	r10, r22
    12cc:	4a 01       	movw	r8, r20
    12ce:	79 01       	movw	r14, r18
    12d0:	d9 01       	movw	r26, r18
    12d2:	13 96       	adiw	r26, 0x03	; 3
    12d4:	2c 91       	ld	r18, X
    12d6:	d0 e0       	ldi	r29, 0x00	; 0
    12d8:	c0 e0       	ldi	r28, 0x00	; 0
    12da:	21 ff       	sbrs	r18, 1
    12dc:	1a c0       	rjmp	.+52     	; 0x1312 <fwrite+0x60>
    12de:	c8 15       	cp	r28, r8
    12e0:	d9 05       	cpc	r29, r9
    12e2:	b9 f0       	breq	.+46     	; 0x1312 <fwrite+0x60>
    12e4:	8c 01       	movw	r16, r24
    12e6:	6c 01       	movw	r12, r24
    12e8:	ca 0c       	add	r12, r10
    12ea:	db 1c       	adc	r13, r11
    12ec:	0c c0       	rjmp	.+24     	; 0x1306 <fwrite+0x54>
    12ee:	0f 5f       	subi	r16, 0xFF	; 255
    12f0:	1f 4f       	sbci	r17, 0xFF	; 255
    12f2:	d7 01       	movw	r26, r14
    12f4:	18 96       	adiw	r26, 0x08	; 8
    12f6:	ed 91       	ld	r30, X+
    12f8:	fc 91       	ld	r31, X
    12fa:	b7 01       	movw	r22, r14
    12fc:	dc 01       	movw	r26, r24
    12fe:	8c 91       	ld	r24, X
    1300:	09 95       	icall
    1302:	89 2b       	or	r24, r25
    1304:	31 f4       	brne	.+12     	; 0x1312 <fwrite+0x60>
    1306:	c8 01       	movw	r24, r16
    1308:	0c 15       	cp	r16, r12
    130a:	1d 05       	cpc	r17, r13
    130c:	81 f7       	brne	.-32     	; 0x12ee <fwrite+0x3c>
    130e:	21 96       	adiw	r28, 0x01	; 1
    1310:	e6 cf       	rjmp	.-52     	; 0x12de <fwrite+0x2c>
    1312:	ce 01       	movw	r24, r28
    1314:	df 91       	pop	r29
    1316:	cf 91       	pop	r28
    1318:	1f 91       	pop	r17
    131a:	0f 91       	pop	r16
    131c:	ff 90       	pop	r15
    131e:	ef 90       	pop	r14
    1320:	df 90       	pop	r13
    1322:	cf 90       	pop	r12
    1324:	bf 90       	pop	r11
    1326:	af 90       	pop	r10
    1328:	9f 90       	pop	r9
    132a:	8f 90       	pop	r8
    132c:	08 95       	ret

0000132e <printf>:
printf():
    132e:	cf 93       	push	r28
    1330:	df 93       	push	r29
    1332:	cd b7       	in	r28, 0x3d	; 61
    1334:	de b7       	in	r29, 0x3e	; 62
    1336:	ae 01       	movw	r20, r28
    1338:	4b 5f       	subi	r20, 0xFB	; 251
    133a:	5f 4f       	sbci	r21, 0xFF	; 255
    133c:	fa 01       	movw	r30, r20
    133e:	61 91       	ld	r22, Z+
    1340:	71 91       	ld	r23, Z+
    1342:	af 01       	movw	r20, r30
    1344:	80 91 b9 42 	lds	r24, 0x42B9	; 0x8042b9 <__iob+0x2>
    1348:	90 91 ba 42 	lds	r25, 0x42BA	; 0x8042ba <__iob+0x3>
    134c:	0e 94 dc 09 	call	0x13b8	; 0x13b8 <vfprintf>
    1350:	df 91       	pop	r29
    1352:	cf 91       	pop	r28
    1354:	08 95       	ret

00001356 <putchar>:
putchar():
    1356:	60 91 b9 42 	lds	r22, 0x42B9	; 0x8042b9 <__iob+0x2>
    135a:	70 91 ba 42 	lds	r23, 0x42BA	; 0x8042ba <__iob+0x3>
    135e:	0c 94 ef 0b 	jmp	0x17de	; 0x17de <fputc>

00001362 <puts>:
puts():
    1362:	0f 93       	push	r16
    1364:	1f 93       	push	r17
    1366:	cf 93       	push	r28
    1368:	df 93       	push	r29
    136a:	e0 91 b9 42 	lds	r30, 0x42B9	; 0x8042b9 <__iob+0x2>
    136e:	f0 91 ba 42 	lds	r31, 0x42BA	; 0x8042ba <__iob+0x3>
    1372:	23 81       	ldd	r18, Z+3	; 0x03
    1374:	ec 01       	movw	r28, r24
    1376:	10 e0       	ldi	r17, 0x00	; 0
    1378:	00 e0       	ldi	r16, 0x00	; 0
    137a:	21 fd       	sbrc	r18, 1
    137c:	08 c0       	rjmp	.+16     	; 0x138e <puts+0x2c>
    137e:	0f ef       	ldi	r16, 0xFF	; 255
    1380:	1f ef       	ldi	r17, 0xFF	; 255
    1382:	14 c0       	rjmp	.+40     	; 0x13ac <puts+0x4a>
    1384:	09 95       	icall
    1386:	89 2b       	or	r24, r25
    1388:	11 f0       	breq	.+4      	; 0x138e <puts+0x2c>
    138a:	0f ef       	ldi	r16, 0xFF	; 255
    138c:	1f ef       	ldi	r17, 0xFF	; 255
    138e:	89 91       	ld	r24, Y+
    1390:	60 91 b9 42 	lds	r22, 0x42B9	; 0x8042b9 <__iob+0x2>
    1394:	70 91 ba 42 	lds	r23, 0x42BA	; 0x8042ba <__iob+0x3>
    1398:	db 01       	movw	r26, r22
    139a:	18 96       	adiw	r26, 0x08	; 8
    139c:	ed 91       	ld	r30, X+
    139e:	fc 91       	ld	r31, X
    13a0:	81 11       	cpse	r24, r1
    13a2:	f0 cf       	rjmp	.-32     	; 0x1384 <puts+0x22>
    13a4:	8a e0       	ldi	r24, 0x0A	; 10
    13a6:	09 95       	icall
    13a8:	89 2b       	or	r24, r25
    13aa:	49 f7       	brne	.-46     	; 0x137e <puts+0x1c>
    13ac:	c8 01       	movw	r24, r16
    13ae:	df 91       	pop	r29
    13b0:	cf 91       	pop	r28
    13b2:	1f 91       	pop	r17
    13b4:	0f 91       	pop	r16
    13b6:	08 95       	ret

000013b8 <vfprintf>:
vfprintf():
    13b8:	2f 92       	push	r2
    13ba:	3f 92       	push	r3
    13bc:	4f 92       	push	r4
    13be:	5f 92       	push	r5
    13c0:	6f 92       	push	r6
    13c2:	7f 92       	push	r7
    13c4:	8f 92       	push	r8
    13c6:	9f 92       	push	r9
    13c8:	af 92       	push	r10
    13ca:	bf 92       	push	r11
    13cc:	cf 92       	push	r12
    13ce:	df 92       	push	r13
    13d0:	ef 92       	push	r14
    13d2:	ff 92       	push	r15
    13d4:	0f 93       	push	r16
    13d6:	1f 93       	push	r17
    13d8:	cf 93       	push	r28
    13da:	df 93       	push	r29
    13dc:	cd b7       	in	r28, 0x3d	; 61
    13de:	de b7       	in	r29, 0x3e	; 62
    13e0:	2b 97       	sbiw	r28, 0x0b	; 11
    13e2:	cd bf       	out	0x3d, r28	; 61
    13e4:	de bf       	out	0x3e, r29	; 62
    13e6:	7c 01       	movw	r14, r24
    13e8:	3b 01       	movw	r6, r22
    13ea:	8a 01       	movw	r16, r20
    13ec:	fc 01       	movw	r30, r24
    13ee:	16 82       	std	Z+6, r1	; 0x06
    13f0:	17 82       	std	Z+7, r1	; 0x07
    13f2:	83 81       	ldd	r24, Z+3	; 0x03
    13f4:	81 ff       	sbrs	r24, 1
    13f6:	da c1       	rjmp	.+948    	; 0x17ac <vfprintf+0x3f4>
    13f8:	ce 01       	movw	r24, r28
    13fa:	01 96       	adiw	r24, 0x01	; 1
    13fc:	5c 01       	movw	r10, r24
    13fe:	f7 01       	movw	r30, r14
    1400:	93 81       	ldd	r25, Z+3	; 0x03
    1402:	f3 01       	movw	r30, r6
    1404:	93 fd       	sbrc	r25, 3
    1406:	85 91       	lpm	r24, Z+
    1408:	93 ff       	sbrs	r25, 3
    140a:	81 91       	ld	r24, Z+
    140c:	3f 01       	movw	r6, r30
    140e:	88 23       	and	r24, r24
    1410:	09 f4       	brne	.+2      	; 0x1414 <vfprintf+0x5c>
    1412:	53 c1       	rjmp	.+678    	; 0x16ba <vfprintf+0x302>
    1414:	85 32       	cpi	r24, 0x25	; 37
    1416:	39 f4       	brne	.+14     	; 0x1426 <vfprintf+0x6e>
    1418:	93 fd       	sbrc	r25, 3
    141a:	85 91       	lpm	r24, Z+
    141c:	93 ff       	sbrs	r25, 3
    141e:	81 91       	ld	r24, Z+
    1420:	3f 01       	movw	r6, r30
    1422:	85 32       	cpi	r24, 0x25	; 37
    1424:	29 f4       	brne	.+10     	; 0x1430 <vfprintf+0x78>
    1426:	b7 01       	movw	r22, r14
    1428:	90 e0       	ldi	r25, 0x00	; 0
    142a:	0e 94 ef 0b 	call	0x17de	; 0x17de <fputc>
    142e:	e7 cf       	rjmp	.-50     	; 0x13fe <vfprintf+0x46>
    1430:	91 2c       	mov	r9, r1
    1432:	21 2c       	mov	r2, r1
    1434:	31 2c       	mov	r3, r1
    1436:	ff e1       	ldi	r31, 0x1F	; 31
    1438:	f3 15       	cp	r31, r3
    143a:	38 f0       	brcs	.+14     	; 0x144a <vfprintf+0x92>
    143c:	8b 32       	cpi	r24, 0x2B	; 43
    143e:	11 f1       	breq	.+68     	; 0x1484 <vfprintf+0xcc>
    1440:	90 f4       	brcc	.+36     	; 0x1466 <vfprintf+0xae>
    1442:	80 32       	cpi	r24, 0x20	; 32
    1444:	09 f1       	breq	.+66     	; 0x1488 <vfprintf+0xd0>
    1446:	83 32       	cpi	r24, 0x23	; 35
    1448:	29 f1       	breq	.+74     	; 0x1494 <vfprintf+0xdc>
    144a:	37 fc       	sbrc	r3, 7
    144c:	3c c0       	rjmp	.+120    	; 0x14c6 <vfprintf+0x10e>
    144e:	20 ed       	ldi	r18, 0xD0	; 208
    1450:	28 0f       	add	r18, r24
    1452:	2a 30       	cpi	r18, 0x0A	; 10
    1454:	50 f5       	brcc	.+84     	; 0x14aa <vfprintf+0xf2>
    1456:	36 fe       	sbrs	r3, 6
    1458:	20 c0       	rjmp	.+64     	; 0x149a <vfprintf+0xe2>
    145a:	8a e0       	ldi	r24, 0x0A	; 10
    145c:	98 9e       	mul	r9, r24
    145e:	20 0d       	add	r18, r0
    1460:	11 24       	eor	r1, r1
    1462:	92 2e       	mov	r9, r18
    1464:	06 c0       	rjmp	.+12     	; 0x1472 <vfprintf+0xba>
    1466:	8d 32       	cpi	r24, 0x2D	; 45
    1468:	91 f0       	breq	.+36     	; 0x148e <vfprintf+0xd6>
    146a:	80 33       	cpi	r24, 0x30	; 48
    146c:	71 f7       	brne	.-36     	; 0x144a <vfprintf+0x92>
    146e:	68 94       	set
    1470:	30 f8       	bld	r3, 0
    1472:	f3 01       	movw	r30, r6
    1474:	93 fd       	sbrc	r25, 3
    1476:	85 91       	lpm	r24, Z+
    1478:	93 ff       	sbrs	r25, 3
    147a:	81 91       	ld	r24, Z+
    147c:	3f 01       	movw	r6, r30
    147e:	81 11       	cpse	r24, r1
    1480:	da cf       	rjmp	.-76     	; 0x1436 <vfprintf+0x7e>
    1482:	21 c0       	rjmp	.+66     	; 0x14c6 <vfprintf+0x10e>
    1484:	68 94       	set
    1486:	31 f8       	bld	r3, 1
    1488:	68 94       	set
    148a:	32 f8       	bld	r3, 2
    148c:	f2 cf       	rjmp	.-28     	; 0x1472 <vfprintf+0xba>
    148e:	68 94       	set
    1490:	33 f8       	bld	r3, 3
    1492:	ef cf       	rjmp	.-34     	; 0x1472 <vfprintf+0xba>
    1494:	68 94       	set
    1496:	34 f8       	bld	r3, 4
    1498:	ec cf       	rjmp	.-40     	; 0x1472 <vfprintf+0xba>
    149a:	ea e0       	ldi	r30, 0x0A	; 10
    149c:	2e 9e       	mul	r2, r30
    149e:	20 0d       	add	r18, r0
    14a0:	11 24       	eor	r1, r1
    14a2:	22 2e       	mov	r2, r18
    14a4:	68 94       	set
    14a6:	35 f8       	bld	r3, 5
    14a8:	e4 cf       	rjmp	.-56     	; 0x1472 <vfprintf+0xba>
    14aa:	8e 32       	cpi	r24, 0x2E	; 46
    14ac:	29 f4       	brne	.+10     	; 0x14b8 <vfprintf+0x100>
    14ae:	36 fc       	sbrc	r3, 6
    14b0:	04 c1       	rjmp	.+520    	; 0x16ba <vfprintf+0x302>
    14b2:	68 94       	set
    14b4:	36 f8       	bld	r3, 6
    14b6:	dd cf       	rjmp	.-70     	; 0x1472 <vfprintf+0xba>
    14b8:	8c 36       	cpi	r24, 0x6C	; 108
    14ba:	19 f4       	brne	.+6      	; 0x14c2 <vfprintf+0x10a>
    14bc:	68 94       	set
    14be:	37 f8       	bld	r3, 7
    14c0:	d8 cf       	rjmp	.-80     	; 0x1472 <vfprintf+0xba>
    14c2:	88 36       	cpi	r24, 0x68	; 104
    14c4:	b1 f2       	breq	.-84     	; 0x1472 <vfprintf+0xba>
    14c6:	98 2f       	mov	r25, r24
    14c8:	9f 7d       	andi	r25, 0xDF	; 223
    14ca:	95 54       	subi	r25, 0x45	; 69
    14cc:	93 30       	cpi	r25, 0x03	; 3
    14ce:	e0 f0       	brcs	.+56     	; 0x1508 <vfprintf+0x150>
    14d0:	83 36       	cpi	r24, 0x63	; 99
    14d2:	a1 f1       	breq	.+104    	; 0x153c <vfprintf+0x184>
    14d4:	83 37       	cpi	r24, 0x73	; 115
    14d6:	c1 f1       	breq	.+112    	; 0x1548 <vfprintf+0x190>
    14d8:	83 35       	cpi	r24, 0x53	; 83
    14da:	09 f0       	breq	.+2      	; 0x14de <vfprintf+0x126>
    14dc:	63 c0       	rjmp	.+198    	; 0x15a4 <vfprintf+0x1ec>
    14de:	28 01       	movw	r4, r16
    14e0:	f2 e0       	ldi	r31, 0x02	; 2
    14e2:	4f 0e       	add	r4, r31
    14e4:	51 1c       	adc	r5, r1
    14e6:	f8 01       	movw	r30, r16
    14e8:	c0 80       	ld	r12, Z
    14ea:	d1 80       	ldd	r13, Z+1	; 0x01
    14ec:	69 2d       	mov	r22, r9
    14ee:	70 e0       	ldi	r23, 0x00	; 0
    14f0:	36 fc       	sbrc	r3, 6
    14f2:	02 c0       	rjmp	.+4      	; 0x14f8 <vfprintf+0x140>
    14f4:	6f ef       	ldi	r22, 0xFF	; 255
    14f6:	7f ef       	ldi	r23, 0xFF	; 255
    14f8:	c6 01       	movw	r24, r12
    14fa:	0e 94 d9 0b 	call	0x17b2	; 0x17b2 <strnlen_P>
    14fe:	4c 01       	movw	r8, r24
    1500:	68 94       	set
    1502:	37 f8       	bld	r3, 7
    1504:	82 01       	movw	r16, r4
    1506:	0a c0       	rjmp	.+20     	; 0x151c <vfprintf+0x164>
    1508:	0c 5f       	subi	r16, 0xFC	; 252
    150a:	1f 4f       	sbci	r17, 0xFF	; 255
    150c:	ff e3       	ldi	r31, 0x3F	; 63
    150e:	f9 83       	std	Y+1, r31	; 0x01
    1510:	88 24       	eor	r8, r8
    1512:	83 94       	inc	r8
    1514:	91 2c       	mov	r9, r1
    1516:	65 01       	movw	r12, r10
    1518:	e8 94       	clt
    151a:	37 f8       	bld	r3, 7
    151c:	33 fe       	sbrs	r3, 3
    151e:	2d c0       	rjmp	.+90     	; 0x157a <vfprintf+0x1c2>
    1520:	52 2c       	mov	r5, r2
    1522:	81 14       	cp	r8, r1
    1524:	91 04       	cpc	r9, r1
    1526:	71 f5       	brne	.+92     	; 0x1584 <vfprintf+0x1cc>
    1528:	55 20       	and	r5, r5
    152a:	09 f4       	brne	.+2      	; 0x152e <vfprintf+0x176>
    152c:	68 cf       	rjmp	.-304    	; 0x13fe <vfprintf+0x46>
    152e:	b7 01       	movw	r22, r14
    1530:	80 e2       	ldi	r24, 0x20	; 32
    1532:	90 e0       	ldi	r25, 0x00	; 0
    1534:	0e 94 ef 0b 	call	0x17de	; 0x17de <fputc>
    1538:	5a 94       	dec	r5
    153a:	f6 cf       	rjmp	.-20     	; 0x1528 <vfprintf+0x170>
    153c:	f8 01       	movw	r30, r16
    153e:	80 81       	ld	r24, Z
    1540:	89 83       	std	Y+1, r24	; 0x01
    1542:	0e 5f       	subi	r16, 0xFE	; 254
    1544:	1f 4f       	sbci	r17, 0xFF	; 255
    1546:	e4 cf       	rjmp	.-56     	; 0x1510 <vfprintf+0x158>
    1548:	28 01       	movw	r4, r16
    154a:	f2 e0       	ldi	r31, 0x02	; 2
    154c:	4f 0e       	add	r4, r31
    154e:	51 1c       	adc	r5, r1
    1550:	f8 01       	movw	r30, r16
    1552:	c0 80       	ld	r12, Z
    1554:	d1 80       	ldd	r13, Z+1	; 0x01
    1556:	69 2d       	mov	r22, r9
    1558:	70 e0       	ldi	r23, 0x00	; 0
    155a:	36 fc       	sbrc	r3, 6
    155c:	02 c0       	rjmp	.+4      	; 0x1562 <vfprintf+0x1aa>
    155e:	6f ef       	ldi	r22, 0xFF	; 255
    1560:	7f ef       	ldi	r23, 0xFF	; 255
    1562:	c6 01       	movw	r24, r12
    1564:	0e 94 e4 0b 	call	0x17c8	; 0x17c8 <strnlen>
    1568:	4c 01       	movw	r8, r24
    156a:	82 01       	movw	r16, r4
    156c:	d5 cf       	rjmp	.-86     	; 0x1518 <vfprintf+0x160>
    156e:	b7 01       	movw	r22, r14
    1570:	80 e2       	ldi	r24, 0x20	; 32
    1572:	90 e0       	ldi	r25, 0x00	; 0
    1574:	0e 94 ef 0b 	call	0x17de	; 0x17de <fputc>
    1578:	2a 94       	dec	r2
    157a:	28 14       	cp	r2, r8
    157c:	19 04       	cpc	r1, r9
    157e:	09 f0       	breq	.+2      	; 0x1582 <vfprintf+0x1ca>
    1580:	b0 f7       	brcc	.-20     	; 0x156e <vfprintf+0x1b6>
    1582:	ce cf       	rjmp	.-100    	; 0x1520 <vfprintf+0x168>
    1584:	f6 01       	movw	r30, r12
    1586:	37 fc       	sbrc	r3, 7
    1588:	85 91       	lpm	r24, Z+
    158a:	37 fe       	sbrs	r3, 7
    158c:	81 91       	ld	r24, Z+
    158e:	6f 01       	movw	r12, r30
    1590:	b7 01       	movw	r22, r14
    1592:	90 e0       	ldi	r25, 0x00	; 0
    1594:	0e 94 ef 0b 	call	0x17de	; 0x17de <fputc>
    1598:	51 10       	cpse	r5, r1
    159a:	5a 94       	dec	r5
    159c:	f1 e0       	ldi	r31, 0x01	; 1
    159e:	8f 1a       	sub	r8, r31
    15a0:	91 08       	sbc	r9, r1
    15a2:	bf cf       	rjmp	.-130    	; 0x1522 <vfprintf+0x16a>
    15a4:	84 36       	cpi	r24, 0x64	; 100
    15a6:	19 f0       	breq	.+6      	; 0x15ae <vfprintf+0x1f6>
    15a8:	89 36       	cpi	r24, 0x69	; 105
    15aa:	09 f0       	breq	.+2      	; 0x15ae <vfprintf+0x1f6>
    15ac:	77 c0       	rjmp	.+238    	; 0x169c <vfprintf+0x2e4>
    15ae:	f8 01       	movw	r30, r16
    15b0:	37 fe       	sbrs	r3, 7
    15b2:	6b c0       	rjmp	.+214    	; 0x168a <vfprintf+0x2d2>
    15b4:	60 81       	ld	r22, Z
    15b6:	71 81       	ldd	r23, Z+1	; 0x01
    15b8:	82 81       	ldd	r24, Z+2	; 0x02
    15ba:	93 81       	ldd	r25, Z+3	; 0x03
    15bc:	0c 5f       	subi	r16, 0xFC	; 252
    15be:	1f 4f       	sbci	r17, 0xFF	; 255
    15c0:	f3 2d       	mov	r31, r3
    15c2:	ff 76       	andi	r31, 0x6F	; 111
    15c4:	3f 2e       	mov	r3, r31
    15c6:	97 ff       	sbrs	r25, 7
    15c8:	09 c0       	rjmp	.+18     	; 0x15dc <vfprintf+0x224>
    15ca:	90 95       	com	r25
    15cc:	80 95       	com	r24
    15ce:	70 95       	com	r23
    15d0:	61 95       	neg	r22
    15d2:	7f 4f       	sbci	r23, 0xFF	; 255
    15d4:	8f 4f       	sbci	r24, 0xFF	; 255
    15d6:	9f 4f       	sbci	r25, 0xFF	; 255
    15d8:	68 94       	set
    15da:	37 f8       	bld	r3, 7
    15dc:	2a e0       	ldi	r18, 0x0A	; 10
    15de:	30 e0       	ldi	r19, 0x00	; 0
    15e0:	a5 01       	movw	r20, r10
    15e2:	0e 94 1f 0c 	call	0x183e	; 0x183e <__ultoa_invert>
    15e6:	c8 2e       	mov	r12, r24
    15e8:	ca 18       	sub	r12, r10
    15ea:	8c 2c       	mov	r8, r12
    15ec:	43 2c       	mov	r4, r3
    15ee:	36 fe       	sbrs	r3, 6
    15f0:	0c c0       	rjmp	.+24     	; 0x160a <vfprintf+0x252>
    15f2:	e8 94       	clt
    15f4:	40 f8       	bld	r4, 0
    15f6:	c9 14       	cp	r12, r9
    15f8:	40 f4       	brcc	.+16     	; 0x160a <vfprintf+0x252>
    15fa:	34 fe       	sbrs	r3, 4
    15fc:	05 c0       	rjmp	.+10     	; 0x1608 <vfprintf+0x250>
    15fe:	32 fc       	sbrc	r3, 2
    1600:	03 c0       	rjmp	.+6      	; 0x1608 <vfprintf+0x250>
    1602:	f3 2d       	mov	r31, r3
    1604:	fe 7e       	andi	r31, 0xEE	; 238
    1606:	4f 2e       	mov	r4, r31
    1608:	89 2c       	mov	r8, r9
    160a:	44 fe       	sbrs	r4, 4
    160c:	a7 c0       	rjmp	.+334    	; 0x175c <vfprintf+0x3a4>
    160e:	fe 01       	movw	r30, r28
    1610:	ec 0d       	add	r30, r12
    1612:	f1 1d       	adc	r31, r1
    1614:	80 81       	ld	r24, Z
    1616:	80 33       	cpi	r24, 0x30	; 48
    1618:	09 f0       	breq	.+2      	; 0x161c <vfprintf+0x264>
    161a:	99 c0       	rjmp	.+306    	; 0x174e <vfprintf+0x396>
    161c:	24 2d       	mov	r18, r4
    161e:	29 7e       	andi	r18, 0xE9	; 233
    1620:	42 2e       	mov	r4, r18
    1622:	84 2d       	mov	r24, r4
    1624:	88 70       	andi	r24, 0x08	; 8
    1626:	58 2e       	mov	r5, r24
    1628:	43 fc       	sbrc	r4, 3
    162a:	a7 c0       	rjmp	.+334    	; 0x177a <vfprintf+0x3c2>
    162c:	40 fe       	sbrs	r4, 0
    162e:	a1 c0       	rjmp	.+322    	; 0x1772 <vfprintf+0x3ba>
    1630:	9c 2c       	mov	r9, r12
    1632:	82 14       	cp	r8, r2
    1634:	18 f4       	brcc	.+6      	; 0x163c <vfprintf+0x284>
    1636:	2c 0c       	add	r2, r12
    1638:	92 2c       	mov	r9, r2
    163a:	98 18       	sub	r9, r8
    163c:	44 fe       	sbrs	r4, 4
    163e:	a3 c0       	rjmp	.+326    	; 0x1786 <vfprintf+0x3ce>
    1640:	b7 01       	movw	r22, r14
    1642:	80 e3       	ldi	r24, 0x30	; 48
    1644:	90 e0       	ldi	r25, 0x00	; 0
    1646:	0e 94 ef 0b 	call	0x17de	; 0x17de <fputc>
    164a:	42 fe       	sbrs	r4, 2
    164c:	09 c0       	rjmp	.+18     	; 0x1660 <vfprintf+0x2a8>
    164e:	88 e7       	ldi	r24, 0x78	; 120
    1650:	90 e0       	ldi	r25, 0x00	; 0
    1652:	41 fe       	sbrs	r4, 1
    1654:	02 c0       	rjmp	.+4      	; 0x165a <vfprintf+0x2a2>
    1656:	88 e5       	ldi	r24, 0x58	; 88
    1658:	90 e0       	ldi	r25, 0x00	; 0
    165a:	b7 01       	movw	r22, r14
    165c:	0e 94 ef 0b 	call	0x17de	; 0x17de <fputc>
    1660:	c9 14       	cp	r12, r9
    1662:	08 f4       	brcc	.+2      	; 0x1666 <vfprintf+0x2ae>
    1664:	9c c0       	rjmp	.+312    	; 0x179e <vfprintf+0x3e6>
    1666:	ca 94       	dec	r12
    1668:	d1 2c       	mov	r13, r1
    166a:	9f ef       	ldi	r25, 0xFF	; 255
    166c:	c9 1a       	sub	r12, r25
    166e:	d9 0a       	sbc	r13, r25
    1670:	ca 0c       	add	r12, r10
    1672:	db 1c       	adc	r13, r11
    1674:	f6 01       	movw	r30, r12
    1676:	82 91       	ld	r24, -Z
    1678:	6f 01       	movw	r12, r30
    167a:	b7 01       	movw	r22, r14
    167c:	90 e0       	ldi	r25, 0x00	; 0
    167e:	0e 94 ef 0b 	call	0x17de	; 0x17de <fputc>
    1682:	ac 14       	cp	r10, r12
    1684:	bd 04       	cpc	r11, r13
    1686:	b1 f7       	brne	.-20     	; 0x1674 <vfprintf+0x2bc>
    1688:	4f cf       	rjmp	.-354    	; 0x1528 <vfprintf+0x170>
    168a:	60 81       	ld	r22, Z
    168c:	71 81       	ldd	r23, Z+1	; 0x01
    168e:	07 2e       	mov	r0, r23
    1690:	00 0c       	add	r0, r0
    1692:	88 0b       	sbc	r24, r24
    1694:	99 0b       	sbc	r25, r25
    1696:	0e 5f       	subi	r16, 0xFE	; 254
    1698:	1f 4f       	sbci	r17, 0xFF	; 255
    169a:	92 cf       	rjmp	.-220    	; 0x15c0 <vfprintf+0x208>
    169c:	d3 2c       	mov	r13, r3
    169e:	e8 94       	clt
    16a0:	d4 f8       	bld	r13, 4
    16a2:	2a e0       	ldi	r18, 0x0A	; 10
    16a4:	30 e0       	ldi	r19, 0x00	; 0
    16a6:	85 37       	cpi	r24, 0x75	; 117
    16a8:	c9 f1       	breq	.+114    	; 0x171c <vfprintf+0x364>
    16aa:	23 2d       	mov	r18, r3
    16ac:	29 7f       	andi	r18, 0xF9	; 249
    16ae:	d2 2e       	mov	r13, r18
    16b0:	8f 36       	cpi	r24, 0x6F	; 111
    16b2:	91 f1       	breq	.+100    	; 0x1718 <vfprintf+0x360>
    16b4:	d8 f4       	brcc	.+54     	; 0x16ec <vfprintf+0x334>
    16b6:	88 35       	cpi	r24, 0x58	; 88
    16b8:	39 f1       	breq	.+78     	; 0x1708 <vfprintf+0x350>
    16ba:	f7 01       	movw	r30, r14
    16bc:	86 81       	ldd	r24, Z+6	; 0x06
    16be:	97 81       	ldd	r25, Z+7	; 0x07
    16c0:	2b 96       	adiw	r28, 0x0b	; 11
    16c2:	cd bf       	out	0x3d, r28	; 61
    16c4:	de bf       	out	0x3e, r29	; 62
    16c6:	df 91       	pop	r29
    16c8:	cf 91       	pop	r28
    16ca:	1f 91       	pop	r17
    16cc:	0f 91       	pop	r16
    16ce:	ff 90       	pop	r15
    16d0:	ef 90       	pop	r14
    16d2:	df 90       	pop	r13
    16d4:	cf 90       	pop	r12
    16d6:	bf 90       	pop	r11
    16d8:	af 90       	pop	r10
    16da:	9f 90       	pop	r9
    16dc:	8f 90       	pop	r8
    16de:	7f 90       	pop	r7
    16e0:	6f 90       	pop	r6
    16e2:	5f 90       	pop	r5
    16e4:	4f 90       	pop	r4
    16e6:	3f 90       	pop	r3
    16e8:	2f 90       	pop	r2
    16ea:	08 95       	ret
    16ec:	80 37       	cpi	r24, 0x70	; 112
    16ee:	49 f0       	breq	.+18     	; 0x1702 <vfprintf+0x34a>
    16f0:	88 37       	cpi	r24, 0x78	; 120
    16f2:	19 f7       	brne	.-58     	; 0x16ba <vfprintf+0x302>
    16f4:	d4 fe       	sbrs	r13, 4
    16f6:	02 c0       	rjmp	.+4      	; 0x16fc <vfprintf+0x344>
    16f8:	68 94       	set
    16fa:	d2 f8       	bld	r13, 2
    16fc:	20 e1       	ldi	r18, 0x10	; 16
    16fe:	30 e0       	ldi	r19, 0x00	; 0
    1700:	0d c0       	rjmp	.+26     	; 0x171c <vfprintf+0x364>
    1702:	68 94       	set
    1704:	d4 f8       	bld	r13, 4
    1706:	f6 cf       	rjmp	.-20     	; 0x16f4 <vfprintf+0x33c>
    1708:	34 fe       	sbrs	r3, 4
    170a:	03 c0       	rjmp	.+6      	; 0x1712 <vfprintf+0x35a>
    170c:	82 2f       	mov	r24, r18
    170e:	86 60       	ori	r24, 0x06	; 6
    1710:	d8 2e       	mov	r13, r24
    1712:	20 e1       	ldi	r18, 0x10	; 16
    1714:	32 e0       	ldi	r19, 0x02	; 2
    1716:	02 c0       	rjmp	.+4      	; 0x171c <vfprintf+0x364>
    1718:	28 e0       	ldi	r18, 0x08	; 8
    171a:	30 e0       	ldi	r19, 0x00	; 0
    171c:	f8 01       	movw	r30, r16
    171e:	d7 fe       	sbrs	r13, 7
    1720:	0f c0       	rjmp	.+30     	; 0x1740 <vfprintf+0x388>
    1722:	60 81       	ld	r22, Z
    1724:	71 81       	ldd	r23, Z+1	; 0x01
    1726:	82 81       	ldd	r24, Z+2	; 0x02
    1728:	93 81       	ldd	r25, Z+3	; 0x03
    172a:	0c 5f       	subi	r16, 0xFC	; 252
    172c:	1f 4f       	sbci	r17, 0xFF	; 255
    172e:	a5 01       	movw	r20, r10
    1730:	0e 94 1f 0c 	call	0x183e	; 0x183e <__ultoa_invert>
    1734:	c8 2e       	mov	r12, r24
    1736:	ca 18       	sub	r12, r10
    1738:	3d 2c       	mov	r3, r13
    173a:	e8 94       	clt
    173c:	37 f8       	bld	r3, 7
    173e:	55 cf       	rjmp	.-342    	; 0x15ea <vfprintf+0x232>
    1740:	60 81       	ld	r22, Z
    1742:	71 81       	ldd	r23, Z+1	; 0x01
    1744:	90 e0       	ldi	r25, 0x00	; 0
    1746:	80 e0       	ldi	r24, 0x00	; 0
    1748:	0e 5f       	subi	r16, 0xFE	; 254
    174a:	1f 4f       	sbci	r17, 0xFF	; 255
    174c:	f0 cf       	rjmp	.-32     	; 0x172e <vfprintf+0x376>
    174e:	42 fc       	sbrc	r4, 2
    1750:	02 c0       	rjmp	.+4      	; 0x1756 <vfprintf+0x39e>
    1752:	83 94       	inc	r8
    1754:	66 cf       	rjmp	.-308    	; 0x1622 <vfprintf+0x26a>
    1756:	83 94       	inc	r8
    1758:	83 94       	inc	r8
    175a:	63 cf       	rjmp	.-314    	; 0x1622 <vfprintf+0x26a>
    175c:	84 2d       	mov	r24, r4
    175e:	86 78       	andi	r24, 0x86	; 134
    1760:	09 f4       	brne	.+2      	; 0x1764 <vfprintf+0x3ac>
    1762:	5f cf       	rjmp	.-322    	; 0x1622 <vfprintf+0x26a>
    1764:	f6 cf       	rjmp	.-20     	; 0x1752 <vfprintf+0x39a>
    1766:	b7 01       	movw	r22, r14
    1768:	80 e2       	ldi	r24, 0x20	; 32
    176a:	90 e0       	ldi	r25, 0x00	; 0
    176c:	0e 94 ef 0b 	call	0x17de	; 0x17de <fputc>
    1770:	83 94       	inc	r8
    1772:	82 14       	cp	r8, r2
    1774:	c0 f3       	brcs	.-16     	; 0x1766 <vfprintf+0x3ae>
    1776:	51 2c       	mov	r5, r1
    1778:	61 cf       	rjmp	.-318    	; 0x163c <vfprintf+0x284>
    177a:	52 2c       	mov	r5, r2
    177c:	58 18       	sub	r5, r8
    177e:	82 14       	cp	r8, r2
    1780:	08 f4       	brcc	.+2      	; 0x1784 <vfprintf+0x3cc>
    1782:	5c cf       	rjmp	.-328    	; 0x163c <vfprintf+0x284>
    1784:	f8 cf       	rjmp	.-16     	; 0x1776 <vfprintf+0x3be>
    1786:	84 2d       	mov	r24, r4
    1788:	86 78       	andi	r24, 0x86	; 134
    178a:	09 f4       	brne	.+2      	; 0x178e <vfprintf+0x3d6>
    178c:	69 cf       	rjmp	.-302    	; 0x1660 <vfprintf+0x2a8>
    178e:	8b e2       	ldi	r24, 0x2B	; 43
    1790:	41 fe       	sbrs	r4, 1
    1792:	80 e2       	ldi	r24, 0x20	; 32
    1794:	47 fc       	sbrc	r4, 7
    1796:	8d e2       	ldi	r24, 0x2D	; 45
    1798:	b7 01       	movw	r22, r14
    179a:	90 e0       	ldi	r25, 0x00	; 0
    179c:	5f cf       	rjmp	.-322    	; 0x165c <vfprintf+0x2a4>
    179e:	b7 01       	movw	r22, r14
    17a0:	80 e3       	ldi	r24, 0x30	; 48
    17a2:	90 e0       	ldi	r25, 0x00	; 0
    17a4:	0e 94 ef 0b 	call	0x17de	; 0x17de <fputc>
    17a8:	9a 94       	dec	r9
    17aa:	5a cf       	rjmp	.-332    	; 0x1660 <vfprintf+0x2a8>
    17ac:	8f ef       	ldi	r24, 0xFF	; 255
    17ae:	9f ef       	ldi	r25, 0xFF	; 255
    17b0:	87 cf       	rjmp	.-242    	; 0x16c0 <vfprintf+0x308>

000017b2 <strnlen_P>:
strnlen_P():
    17b2:	fc 01       	movw	r30, r24
    17b4:	05 90       	lpm	r0, Z+
    17b6:	61 50       	subi	r22, 0x01	; 1
    17b8:	70 40       	sbci	r23, 0x00	; 0
    17ba:	01 10       	cpse	r0, r1
    17bc:	d8 f7       	brcc	.-10     	; 0x17b4 <strnlen_P+0x2>
    17be:	80 95       	com	r24
    17c0:	90 95       	com	r25
    17c2:	8e 0f       	add	r24, r30
    17c4:	9f 1f       	adc	r25, r31
    17c6:	08 95       	ret

000017c8 <strnlen>:
strnlen():
    17c8:	fc 01       	movw	r30, r24
    17ca:	61 50       	subi	r22, 0x01	; 1
    17cc:	70 40       	sbci	r23, 0x00	; 0
    17ce:	01 90       	ld	r0, Z+
    17d0:	01 10       	cpse	r0, r1
    17d2:	d8 f7       	brcc	.-10     	; 0x17ca <strnlen+0x2>
    17d4:	80 95       	com	r24
    17d6:	90 95       	com	r25
    17d8:	8e 0f       	add	r24, r30
    17da:	9f 1f       	adc	r25, r31
    17dc:	08 95       	ret

000017de <fputc>:
fputc():
    17de:	0f 93       	push	r16
    17e0:	1f 93       	push	r17
    17e2:	cf 93       	push	r28
    17e4:	df 93       	push	r29
    17e6:	18 2f       	mov	r17, r24
    17e8:	09 2f       	mov	r16, r25
    17ea:	eb 01       	movw	r28, r22
    17ec:	8b 81       	ldd	r24, Y+3	; 0x03
    17ee:	81 fd       	sbrc	r24, 1
    17f0:	09 c0       	rjmp	.+18     	; 0x1804 <fputc+0x26>
    17f2:	1f ef       	ldi	r17, 0xFF	; 255
    17f4:	0f ef       	ldi	r16, 0xFF	; 255
    17f6:	81 2f       	mov	r24, r17
    17f8:	90 2f       	mov	r25, r16
    17fa:	df 91       	pop	r29
    17fc:	cf 91       	pop	r28
    17fe:	1f 91       	pop	r17
    1800:	0f 91       	pop	r16
    1802:	08 95       	ret
    1804:	82 ff       	sbrs	r24, 2
    1806:	14 c0       	rjmp	.+40     	; 0x1830 <fputc+0x52>
    1808:	2e 81       	ldd	r18, Y+6	; 0x06
    180a:	3f 81       	ldd	r19, Y+7	; 0x07
    180c:	8c 81       	ldd	r24, Y+4	; 0x04
    180e:	9d 81       	ldd	r25, Y+5	; 0x05
    1810:	28 17       	cp	r18, r24
    1812:	39 07       	cpc	r19, r25
    1814:	3c f4       	brge	.+14     	; 0x1824 <fputc+0x46>
    1816:	e8 81       	ld	r30, Y
    1818:	f9 81       	ldd	r31, Y+1	; 0x01
    181a:	cf 01       	movw	r24, r30
    181c:	01 96       	adiw	r24, 0x01	; 1
    181e:	88 83       	st	Y, r24
    1820:	99 83       	std	Y+1, r25	; 0x01
    1822:	10 83       	st	Z, r17
    1824:	8e 81       	ldd	r24, Y+6	; 0x06
    1826:	9f 81       	ldd	r25, Y+7	; 0x07
    1828:	01 96       	adiw	r24, 0x01	; 1
    182a:	8e 83       	std	Y+6, r24	; 0x06
    182c:	9f 83       	std	Y+7, r25	; 0x07
    182e:	e3 cf       	rjmp	.-58     	; 0x17f6 <fputc+0x18>
    1830:	e8 85       	ldd	r30, Y+8	; 0x08
    1832:	f9 85       	ldd	r31, Y+9	; 0x09
    1834:	81 2f       	mov	r24, r17
    1836:	09 95       	icall
    1838:	89 2b       	or	r24, r25
    183a:	a1 f3       	breq	.-24     	; 0x1824 <fputc+0x46>
    183c:	da cf       	rjmp	.-76     	; 0x17f2 <fputc+0x14>

0000183e <__ultoa_invert>:
__ultoa_invert():
    183e:	fa 01       	movw	r30, r20
    1840:	aa 27       	eor	r26, r26
    1842:	28 30       	cpi	r18, 0x08	; 8
    1844:	51 f1       	breq	.+84     	; 0x189a <__ultoa_invert+0x5c>
    1846:	20 31       	cpi	r18, 0x10	; 16
    1848:	81 f1       	breq	.+96     	; 0x18aa <__ultoa_invert+0x6c>
    184a:	e8 94       	clt
    184c:	6f 93       	push	r22
    184e:	6e 7f       	andi	r22, 0xFE	; 254
    1850:	6e 5f       	subi	r22, 0xFE	; 254
    1852:	7f 4f       	sbci	r23, 0xFF	; 255
    1854:	8f 4f       	sbci	r24, 0xFF	; 255
    1856:	9f 4f       	sbci	r25, 0xFF	; 255
    1858:	af 4f       	sbci	r26, 0xFF	; 255
    185a:	b1 e0       	ldi	r27, 0x01	; 1
    185c:	3e d0       	rcall	.+124    	; 0x18da <__ultoa_invert+0x9c>
    185e:	b4 e0       	ldi	r27, 0x04	; 4
    1860:	3c d0       	rcall	.+120    	; 0x18da <__ultoa_invert+0x9c>
    1862:	67 0f       	add	r22, r23
    1864:	78 1f       	adc	r23, r24
    1866:	89 1f       	adc	r24, r25
    1868:	9a 1f       	adc	r25, r26
    186a:	a1 1d       	adc	r26, r1
    186c:	68 0f       	add	r22, r24
    186e:	79 1f       	adc	r23, r25
    1870:	8a 1f       	adc	r24, r26
    1872:	91 1d       	adc	r25, r1
    1874:	a1 1d       	adc	r26, r1
    1876:	6a 0f       	add	r22, r26
    1878:	71 1d       	adc	r23, r1
    187a:	81 1d       	adc	r24, r1
    187c:	91 1d       	adc	r25, r1
    187e:	a1 1d       	adc	r26, r1
    1880:	20 d0       	rcall	.+64     	; 0x18c2 <__ultoa_invert+0x84>
    1882:	09 f4       	brne	.+2      	; 0x1886 <__ultoa_invert+0x48>
    1884:	68 94       	set
    1886:	3f 91       	pop	r19
    1888:	2a e0       	ldi	r18, 0x0A	; 10
    188a:	26 9f       	mul	r18, r22
    188c:	11 24       	eor	r1, r1
    188e:	30 19       	sub	r19, r0
    1890:	30 5d       	subi	r19, 0xD0	; 208
    1892:	31 93       	st	Z+, r19
    1894:	de f6       	brtc	.-74     	; 0x184c <__ultoa_invert+0xe>
    1896:	cf 01       	movw	r24, r30
    1898:	08 95       	ret
    189a:	46 2f       	mov	r20, r22
    189c:	47 70       	andi	r20, 0x07	; 7
    189e:	40 5d       	subi	r20, 0xD0	; 208
    18a0:	41 93       	st	Z+, r20
    18a2:	b3 e0       	ldi	r27, 0x03	; 3
    18a4:	0f d0       	rcall	.+30     	; 0x18c4 <__ultoa_invert+0x86>
    18a6:	c9 f7       	brne	.-14     	; 0x189a <__ultoa_invert+0x5c>
    18a8:	f6 cf       	rjmp	.-20     	; 0x1896 <__ultoa_invert+0x58>
    18aa:	46 2f       	mov	r20, r22
    18ac:	4f 70       	andi	r20, 0x0F	; 15
    18ae:	40 5d       	subi	r20, 0xD0	; 208
    18b0:	4a 33       	cpi	r20, 0x3A	; 58
    18b2:	18 f0       	brcs	.+6      	; 0x18ba <__ultoa_invert+0x7c>
    18b4:	49 5d       	subi	r20, 0xD9	; 217
    18b6:	31 fd       	sbrc	r19, 1
    18b8:	40 52       	subi	r20, 0x20	; 32
    18ba:	41 93       	st	Z+, r20
    18bc:	02 d0       	rcall	.+4      	; 0x18c2 <__ultoa_invert+0x84>
    18be:	a9 f7       	brne	.-22     	; 0x18aa <__ultoa_invert+0x6c>
    18c0:	ea cf       	rjmp	.-44     	; 0x1896 <__ultoa_invert+0x58>
    18c2:	b4 e0       	ldi	r27, 0x04	; 4
    18c4:	a6 95       	lsr	r26
    18c6:	97 95       	ror	r25
    18c8:	87 95       	ror	r24
    18ca:	77 95       	ror	r23
    18cc:	67 95       	ror	r22
    18ce:	ba 95       	dec	r27
    18d0:	c9 f7       	brne	.-14     	; 0x18c4 <__ultoa_invert+0x86>
    18d2:	00 97       	sbiw	r24, 0x00	; 0
    18d4:	61 05       	cpc	r22, r1
    18d6:	71 05       	cpc	r23, r1
    18d8:	08 95       	ret
    18da:	9b 01       	movw	r18, r22
    18dc:	ac 01       	movw	r20, r24
    18de:	0a 2e       	mov	r0, r26
    18e0:	06 94       	lsr	r0
    18e2:	57 95       	ror	r21
    18e4:	47 95       	ror	r20
    18e6:	37 95       	ror	r19
    18e8:	27 95       	ror	r18
    18ea:	ba 95       	dec	r27
    18ec:	c9 f7       	brne	.-14     	; 0x18e0 <__ultoa_invert+0xa2>
    18ee:	62 0f       	add	r22, r18
    18f0:	73 1f       	adc	r23, r19
    18f2:	84 1f       	adc	r24, r20
    18f4:	95 1f       	adc	r25, r21
    18f6:	a0 1d       	adc	r26, r0
    18f8:	08 95       	ret

000018fa <_exit>:
exit():
    18fa:	f8 94       	cli

000018fc <__stop_program>:
__stop_program():
    18fc:	ff cf       	rjmp	.-2      	; 0x18fc <__stop_program>
